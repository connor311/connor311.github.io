<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: erlang | Connor Ross | Tech]]></title>
  <link href="http://connor311.github.io/categories/erlang/atom.xml" rel="self"/>
  <link href="http://connor311.github.io/"/>
  <updated>2013-07-23T14:21:01+00:00</updated>
  <id>http://connor311.github.io/</id>
  <author>
    <name><![CDATA[Connor Ross]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ã‰tudes for Erlang - CH 8]]></title>
    <link href="http://connor311.github.io/2013/07/22/etudes-for-erlang-ch-8/"/>
    <updated>2013-07-22T23:14:00+00:00</updated>
    <id>http://connor311.github.io/2013/07/22/etudes-for-erlang-ch-8</id>
    <content type="html"><![CDATA[<p>For the past few weeks we have been diving into the normal workings of Erlang.  So far however we have not really ran into anything that makes Erlang special.  To be honest if what we have gone over so far is all that was to Erlang, I would probably tell you to never use this language ever, ever, ever.  Ok maybe that is a little over the top, but as you saw in <a href="/2013/07/08/etudes-for-erlang-ch-5/">Chapter 5</a> Erlang does not handle strings very nicely and that is a lot of what a I use in my day to day programming.</p>

<p>BUT FEAR NOT, my fellow compatriots, there is way more to Erlang.  Today, in this etude we will enter the bread and butter of Erlang.  Welcome my friends to Erlang <a href="http://www.erlang.org/doc/reference_manual/processes.html">Processes</a>!!!! <!-- more --></p>

<h2>Chapter 8: Processes</h2>

<p><a href="http://chimera.labs.oreilly.com/books/1234000000726/ch08.html">link</a></p>

<p>Last week in <a href="/2013/07/15/etudes-for-erlang-ch-7/">Chapter 7</a> the etude concluded with an excersise that used list comprehension to create a deck of cards.  If I was a studied fortune teller, I might have told you that, that could be an ammonius sign pointing to this weeks etude.  I however am not and did not exactly point this out.</p>

<p>The lesson this week asks us to simulate a childhood card game used by parents to keep their kids occupied for hours and hours, The Game Of War (<em>Dun Dun Duuuuunnn</em>).  This game has some very simple rules:</p>

<pre><code>1. Split the deck evenly between two people
2. Each turn consists of each player laying down a card
3. Winner is person with the highest card (Aces high)
4. If the cards match, each player lays down three and the last one is used to battle.
5. This continues until one player has all the cards to the other player does not have enough cards to play a turn.
</code></pre>

<p>Alright, now I know what you are thinking, &ldquo;Cool a card game, but what does that have to do with Erlang processes??&rdquo;  Well I have an answer for that, think of cards as messages that are passed between people.  Then think about people as processes, catching the drift yet?</p>

<p>First on the agenda is to plan out how we want the code to work.  Since this will be the most complex piece of Erlang software we have written so far, it makes sense to spend a little time planning out the plan of attack.  I decided to use <a href="https://www.lucidchart.com/">Lucid Charts</a> to map out how I thought the flow of messages and the logic will progress.</p>

<p>Here is a picture of what I came up with:</p>

<p><img src="/downloads/code/erlang-etudes/ch8/war-planning.png"></p>

<p>I did not shy away from the author&rsquo;s suggestion to break it down into players and dealer.  After my planning session I took a little break to make sure I did not just rush out a solution.  This is what I came up with when I got to coding:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (deck.erl)</span> <a href='/downloads/code/erlang-etudes/ch8/deck.erl'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">deck</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">make</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span> <span class="n">show_deck</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span> <span class="n">compare</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">make_deck</span><span class="o">/</span><span class="mi">0</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nf">make</span><span class="p">(</span><span class="nv">SizeOfDeck</span><span class="p">)</span> <span class="k">when</span> <span class="nv">SizeOfDeck</span> <span class="o">=&lt;</span> <span class="mi">52</span> <span class="o">-&gt;</span>
</span><span class='line'>	<span class="p">{</span><span class="nv">ReturnDeck</span><span class="p">,</span> <span class="p">_}</span> <span class="o">=</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">split</span><span class="p">(</span><span class="nv">SizeOfDeck</span><span class="p">,</span> <span class="n">shuffle</span><span class="p">(</span><span class="n">make_deck</span><span class="p">())),</span>
</span><span class='line'>	<span class="nv">ReturnDeck</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">show_deck</span><span class="p">(</span><span class="nv">Deck</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>	<span class="nn">lists</span><span class="p">:</span><span class="nf">foreach</span><span class="p">(</span><span class="k">fun</span><span class="p">({_,</span><span class="nv">DisplayValue</span><span class="p">,</span> <span class="nv">Suit</span><span class="p">})</span> <span class="o">-&gt;</span>
</span><span class='line'>		<span class="nn">io</span><span class="p">:</span><span class="nf">format</span><span class="p">(</span><span class="s">&quot;</span><span class="si">~p</span><span class="s"> of </span><span class="si">~p~n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">[</span><span class="nv">DisplayValue</span><span class="p">,</span> <span class="nv">Suit</span><span class="p">])</span> <span class="k">end</span><span class="p">,</span> <span class="nv">Deck</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">compare</span><span class="p">({</span><span class="nv">Card1Value</span><span class="p">,</span> <span class="p">_,_},</span> <span class="p">{</span><span class="nv">Card2Value</span><span class="p">,</span> <span class="p">_,_})</span> <span class="o">-&gt;</span>
</span><span class='line'>	<span class="nv">Card1Value</span> <span class="o">-</span> <span class="nv">Card2Value</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% PRIVATE %%</span>
</span><span class='line'>
</span><span class='line'><span class="nf">make_deck</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>	<span class="nv">Cards</span> <span class="o">=</span>
</span><span class='line'>	<span class="p">[{</span><span class="s">&quot;2&quot;</span><span class="p">,</span><span class="mi">2</span><span class="p">},</span>
</span><span class='line'>	<span class="p">{</span><span class="s">&quot;3&quot;</span><span class="p">,</span><span class="mi">3</span><span class="p">},</span>
</span><span class='line'>	<span class="p">{</span><span class="s">&quot;4&quot;</span><span class="p">,</span><span class="mi">4</span><span class="p">},</span>
</span><span class='line'>	<span class="p">{</span><span class="s">&quot;5&quot;</span><span class="p">,</span><span class="mi">5</span><span class="p">},</span>
</span><span class='line'>	<span class="p">{</span><span class="s">&quot;6&quot;</span><span class="p">,</span><span class="mi">6</span><span class="p">},</span>
</span><span class='line'>	<span class="p">{</span><span class="s">&quot;7&quot;</span><span class="p">,</span><span class="mi">7</span><span class="p">},</span>
</span><span class='line'>	<span class="p">{</span><span class="s">&quot;8&quot;</span><span class="p">,</span><span class="mi">8</span><span class="p">},</span>
</span><span class='line'>	<span class="p">{</span><span class="s">&quot;9&quot;</span><span class="p">,</span><span class="mi">9</span><span class="p">},</span>
</span><span class='line'>	<span class="p">{</span><span class="s">&quot;10&quot;</span><span class="p">,</span><span class="mi">10</span><span class="p">},</span>
</span><span class='line'>	<span class="p">{</span><span class="s">&quot;J&quot;</span><span class="p">,</span><span class="mi">11</span><span class="p">},</span>
</span><span class='line'>	<span class="p">{</span><span class="s">&quot;Q&quot;</span><span class="p">,</span><span class="mi">12</span><span class="p">},</span>
</span><span class='line'>	<span class="p">{</span><span class="s">&quot;K&quot;</span><span class="p">,</span><span class="mi">13</span><span class="p">},</span>
</span><span class='line'>	<span class="p">{</span><span class="s">&quot;A&quot;</span><span class="p">,</span> <span class="mi">14</span><span class="p">}],</span>
</span><span class='line'>	<span class="nv">Suits</span> <span class="o">=</span>
</span><span class='line'>	<span class="p">[</span><span class="s">&quot;Clubs&quot;</span><span class="p">,</span>
</span><span class='line'>	<span class="s">&quot;Diamonds&quot;</span><span class="p">,</span>
</span><span class='line'>	<span class="s">&quot;Hearts&quot;</span><span class="p">,</span>
</span><span class='line'>	<span class="s">&quot;Spades&quot;</span><span class="p">],</span>
</span><span class='line'>
</span><span class='line'>	<span class="p">[{</span><span class="nv">Value</span><span class="p">,</span> <span class="nv">DisplayValue</span><span class="p">,</span><span class="nv">Suit</span><span class="p">}</span> <span class="p">||</span>
</span><span class='line'>		<span class="p">{</span><span class="nv">DisplayValue</span><span class="p">,</span> <span class="nv">Value</span><span class="p">}</span> <span class="o">&lt;-</span> <span class="nv">Cards</span><span class="p">,</span>
</span><span class='line'>		<span class="nv">Suit</span> <span class="o">&lt;-</span> <span class="nv">Suits</span><span class="p">].</span>
</span><span class='line'>
</span><span class='line'><span class="c">%%%</span>
</span><span class='line'><span class="c">% Get the Accumulator Setup</span>
</span><span class='line'><span class="c">%%</span>
</span><span class='line'><span class="nf">shuffle</span><span class="p">(</span><span class="nv">List</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">shuffle</span><span class="p">(</span><span class="nv">List</span><span class="p">,</span> <span class="p">[]).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%%</span>
</span><span class='line'><span class="c">% Break recurssion once we have gone through</span>
</span><span class='line'><span class="c">% the whole deck</span>
</span><span class='line'><span class="c">%%</span>
</span><span class='line'><span class="nf">shuffle</span><span class="p">([],</span> <span class="nv">Acc</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nv">Acc</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c">%%</span>
</span><span class='line'><span class="c">% Shuffle the remaining deck</span>
</span><span class='line'><span class="c">% still left in List</span>
</span><span class='line'><span class="c">%%</span>
</span><span class='line'><span class="nf">shuffle</span><span class="p">(</span><span class="nv">List</span><span class="p">,</span> <span class="nv">Acc</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>	<span class="c">%% Split the deck at a random point</span>
</span><span class='line'>	<span class="c">%% then on the second part of the split</span>
</span><span class='line'>	<span class="c">%% take the top card and put at the begining of</span>
</span><span class='line'>	<span class="c">%% out shuffled pill (Acc)</span>
</span><span class='line'>	<span class="p">{</span><span class="nv">Leading</span><span class="p">,</span> <span class="p">[</span><span class="nv">H</span> <span class="p">|</span> <span class="nv">T</span><span class="p">]}</span> <span class="o">=</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">split</span><span class="p">(</span><span class="nn">random</span><span class="p">:</span><span class="nf">uniform</span><span class="p">(</span><span class="nb">length</span><span class="p">(</span><span class="nv">List</span><span class="p">))</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="nv">List</span><span class="p">),</span>
</span><span class='line'>	<span class="n">shuffle</span><span class="p">(</span><span class="nv">Leading</span> <span class="o">++</span> <span class="nv">T</span><span class="p">,</span> <span class="p">[</span><span class="nv">H</span> <span class="p">|</span> <span class="nv">Acc</span><span class="p">]).</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (player.erl)</span> <a href='/downloads/code/erlang-etudes/ch8/player.erl'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">-</span><span class="ni">module</span> <span class="p">(</span><span class="n">player</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span> <span class="p">([</span><span class="n">play</span><span class="o">/</span><span class="mi">0</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">play</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>	<span class="n">listen_loop</span><span class="p">([]).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">listen_loop</span><span class="p">(</span><span class="nv">Cards</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>	<span class="nv">NumberOfCards</span> <span class="o">=</span> <span class="nb">length</span><span class="p">(</span><span class="nv">Cards</span><span class="p">),</span>
</span><span class='line'>	<span class="k">receive</span>
</span><span class='line'>		<span class="p">{_,</span> <span class="n">hand</span><span class="p">,</span> <span class="nv">NewCards</span><span class="p">}</span> <span class="o">-&gt;</span>
</span><span class='line'>			<span class="n">listen_loop</span><span class="p">(</span><span class="nv">NewCards</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>		<span class="p">{</span><span class="nv">From</span><span class="p">,</span> <span class="n">send_cards</span><span class="p">,</span> <span class="nv">N</span><span class="p">}</span> <span class="k">when</span> <span class="nv">N</span> <span class="o">=&lt;</span> <span class="nv">NumberOfCards</span> <span class="o">-&gt;</span>
</span><span class='line'>			<span class="p">{</span><span class="nv">Hand</span><span class="p">,</span> <span class="nv">LeftCards</span><span class="p">}</span> <span class="o">=</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">split</span><span class="p">(</span><span class="nv">N</span><span class="p">,</span> <span class="nv">Cards</span><span class="p">),</span>
</span><span class='line'>			<span class="nv">From</span> <span class="o">!</span> <span class="p">{</span><span class="n">self</span><span class="p">(),</span> <span class="n">send_hand</span><span class="p">,</span> <span class="nv">Hand</span><span class="p">},</span>
</span><span class='line'>			<span class="n">listen_loop</span><span class="p">(</span><span class="nv">LeftCards</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>		<span class="p">{</span><span class="nv">From</span><span class="p">,</span> <span class="n">send_cards</span><span class="p">,</span> <span class="nv">N</span><span class="p">}</span> <span class="k">when</span> <span class="nv">N</span> <span class="o">&gt;</span> <span class="nv">NumberOfCards</span> <span class="o">-&gt;</span>
</span><span class='line'>			<span class="nv">From</span> <span class="o">!</span> <span class="p">{</span><span class="n">self</span><span class="p">(),</span> <span class="n">send_hand</span><span class="p">,</span> <span class="p">[]},</span>
</span><span class='line'>			<span class="n">listen_loop</span><span class="p">(</span><span class="nv">Cards</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>		<span class="p">{_,</span> <span class="n">won_hand</span><span class="p">,</span> <span class="nv">Pile</span><span class="p">}</span> <span class="o">-&gt;</span>
</span><span class='line'>			<span class="n">listen_loop</span><span class="p">(</span><span class="nv">Pile</span> <span class="o">++</span> <span class="nv">Cards</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>		<span class="p">{</span><span class="nv">From</span><span class="p">,</span> <span class="n">send_count</span><span class="p">}</span> <span class="o">-&gt;</span>
</span><span class='line'>			<span class="nv">From</span> <span class="o">!</span> <span class="p">{</span><span class="n">self</span><span class="p">(),</span> <span class="n">send_count</span><span class="p">,</span> <span class="nv">NumberOfCards</span><span class="p">},</span>
</span><span class='line'>			<span class="n">listen_loop</span><span class="p">(</span><span class="nv">Cards</span><span class="p">)</span>
</span><span class='line'>	<span class="k">end</span><span class="p">.</span>		
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (dealer.erl)</span> <a href='/downloads/code/erlang-etudes/ch8/dealer.erl'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">dealer</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span> <span class="p">([</span><span class="n">deal</span><span class="o">/</span><span class="mi">3</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">deal</span><span class="p">(</span><span class="nv">Deck</span><span class="p">,</span> <span class="nv">Player1</span><span class="p">,</span> <span class="nv">Player2</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>	<span class="p">{</span><span class="nv">Player1Cards</span><span class="p">,</span> <span class="nv">Player2Cards</span><span class="p">}</span> <span class="o">=</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">split</span><span class="p">(</span><span class="nb">length</span><span class="p">(</span><span class="nv">Deck</span><span class="p">)</span> <span class="ow">div</span> <span class="mi">2</span><span class="p">,</span> <span class="nv">Deck</span><span class="p">),</span>
</span><span class='line'>	<span class="nv">Player1</span> <span class="o">!</span> <span class="p">{</span><span class="n">self</span><span class="p">(),</span> <span class="n">hand</span><span class="p">,</span> <span class="nv">Player1Cards</span><span class="p">},</span>
</span><span class='line'>	<span class="nv">Player2</span> <span class="o">!</span> <span class="p">{</span><span class="n">self</span><span class="p">(),</span> <span class="n">hand</span><span class="p">,</span> <span class="nv">Player2Cards</span><span class="p">},</span>
</span><span class='line'>	<span class="n">start_hand</span><span class="p">(</span><span class="nv">Player1</span><span class="p">,</span> <span class="nv">Player2</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">start_hand</span><span class="p">(</span><span class="nv">Player1</span><span class="p">,</span><span class="nv">Player2</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>	<span class="nv">Player1</span> <span class="o">!</span> <span class="p">{</span><span class="n">self</span><span class="p">(),</span> <span class="n">send_cards</span><span class="p">,</span> <span class="mi">1</span><span class="p">},</span>
</span><span class='line'>	<span class="nv">Player2</span> <span class="o">!</span> <span class="p">{</span><span class="n">self</span><span class="p">(),</span> <span class="n">send_cards</span><span class="p">,</span> <span class="mi">1</span><span class="p">},</span>
</span><span class='line'>	<span class="n">get_hand</span><span class="p">(</span><span class="nv">Player1</span><span class="p">,</span> <span class="nv">Player2</span><span class="p">,</span> <span class="p">[]).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">start_war</span><span class="p">(</span><span class="nv">Player1</span><span class="p">,</span><span class="nv">Player2</span><span class="p">,</span> <span class="nv">Pile</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>	<span class="nv">Player1</span> <span class="o">!</span> <span class="p">{</span><span class="n">self</span><span class="p">(),</span> <span class="n">send_cards</span><span class="p">,</span> <span class="mi">3</span><span class="p">},</span>
</span><span class='line'>	<span class="nv">Player2</span> <span class="o">!</span> <span class="p">{</span><span class="n">self</span><span class="p">(),</span> <span class="n">send_cards</span><span class="p">,</span> <span class="mi">3</span><span class="p">},</span>
</span><span class='line'>	<span class="n">get_hand</span><span class="p">(</span><span class="nv">Player1</span><span class="p">,</span><span class="nv">Player2</span><span class="p">,</span> <span class="nv">Pile</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">get_hand</span><span class="p">(</span><span class="nv">Player1</span><span class="p">,</span> <span class="nv">Player2</span><span class="p">,</span> <span class="nv">Pile</span><span class="p">)</span>  <span class="o">-&gt;</span>
</span><span class='line'>	<span class="n">hand_loop</span><span class="p">({</span><span class="nv">Player1</span><span class="p">,</span> <span class="p">[]},{</span><span class="nv">Player2</span><span class="p">,</span> <span class="p">[]},</span> <span class="nv">Pile</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">await_hand</span><span class="p">({</span><span class="nv">Player1</span><span class="p">,</span> <span class="nv">Player1Hand</span><span class="p">},{</span><span class="nv">Player2</span><span class="p">,</span> <span class="p">[]},</span> <span class="nv">Pile</span><span class="p">)</span>  <span class="o">-&gt;</span>
</span><span class='line'>	<span class="n">hand_loop</span><span class="p">({</span><span class="nv">Player1</span><span class="p">,</span> <span class="nv">Player1Hand</span><span class="p">},{</span><span class="nv">Player2</span><span class="p">,</span> <span class="p">[]},</span> <span class="nv">Pile</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nf">await_hand</span><span class="p">({</span><span class="nv">Player1</span><span class="p">,</span> <span class="p">[]},{</span><span class="nv">Player2</span><span class="p">,</span> <span class="nv">Player2Hand</span><span class="p">},</span> <span class="nv">Pile</span><span class="p">)</span>  <span class="o">-&gt;</span>
</span><span class='line'>	<span class="n">hand_loop</span><span class="p">({</span><span class="nv">Player1</span><span class="p">,</span> <span class="p">[]},{</span><span class="nv">Player2</span><span class="p">,</span> <span class="nv">Player2Hand</span><span class="p">},</span> <span class="nv">Pile</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nf">await_hand</span><span class="p">({</span><span class="nv">Player1</span><span class="p">,</span> <span class="nv">Player1Hand</span><span class="p">},</span>
</span><span class='line'>			<span class="p">{</span><span class="nv">Player2</span><span class="p">,</span> <span class="nv">Player2Hand</span><span class="p">},</span>
</span><span class='line'>			<span class="nv">Pile</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>	<span class="p">[</span><span class="nv">Player1HandH</span> <span class="p">|</span> <span class="nv">Player1HandT</span><span class="p">]</span> <span class="o">=</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">reverse</span><span class="p">(</span><span class="nv">Player1Hand</span><span class="p">),</span>
</span><span class='line'>	<span class="p">[</span><span class="nv">Player2HandH</span> <span class="p">|</span> <span class="nv">Player2HandT</span><span class="p">]</span> <span class="o">=</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">reverse</span><span class="p">(</span><span class="nv">Player2Hand</span><span class="p">),</span>
</span><span class='line'>	<span class="nv">Compare</span> <span class="o">=</span> <span class="nn">deck</span><span class="p">:</span><span class="nf">compare</span><span class="p">(</span><span class="nv">Player1HandH</span><span class="p">,</span> <span class="nv">Player2HandH</span><span class="p">),</span>
</span><span class='line'>	<span class="nv">NewPile</span> <span class="o">=</span> <span class="nv">Pile</span> <span class="o">++</span> <span class="p">[</span><span class="nv">Player1HandH</span> <span class="p">|</span> <span class="nv">Player1HandT</span><span class="p">]</span> <span class="o">++</span> <span class="p">[</span><span class="nv">Player2HandH</span> <span class="p">|</span> <span class="nv">Player2HandT</span><span class="p">],</span>
</span><span class='line'>	
</span><span class='line'>	<span class="k">if</span>	<span class="nv">Compare</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">-&gt;</span>
</span><span class='line'>			<span class="nn">io</span><span class="p">:</span><span class="nf">format</span><span class="p">(</span><span class="s">&quot;Player 1 wins hand. </span><span class="si">~p</span><span class="s"> vs </span><span class="si">~p~n</span><span class="s">&quot;</span><span class="p">,[</span><span class="nv">Player1HandH</span><span class="p">,</span> <span class="nv">Player2HandH</span><span class="p">]),</span>
</span><span class='line'>			<span class="nv">Player1</span> <span class="o">!</span> <span class="p">{</span><span class="n">self</span><span class="p">(),</span> <span class="n">won_hand</span><span class="p">,</span> <span class="nv">NewPile</span><span class="p">},</span>
</span><span class='line'>			<span class="n">get_count</span><span class="p">(</span><span class="nv">Player1</span><span class="p">,</span> <span class="nv">Player2</span><span class="p">);</span>
</span><span class='line'>		<span class="nv">Compare</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">-&gt;</span>
</span><span class='line'>			<span class="nn">io</span><span class="p">:</span><span class="nf">format</span><span class="p">(</span><span class="s">&quot;Player 2 wins hand. </span><span class="si">~p</span><span class="s"> vs </span><span class="si">~p~n</span><span class="s">&quot;</span><span class="p">,[</span><span class="nv">Player1HandH</span><span class="p">,</span> <span class="nv">Player2HandH</span><span class="p">]),</span>
</span><span class='line'>			<span class="nv">Player2</span> <span class="o">!</span> <span class="p">{</span><span class="n">self</span><span class="p">(),</span> <span class="n">won_hand</span><span class="p">,</span> <span class="nv">NewPile</span><span class="p">},</span>
</span><span class='line'>			<span class="n">get_count</span><span class="p">(</span><span class="nv">Player1</span><span class="p">,</span> <span class="nv">Player2</span><span class="p">);</span>
</span><span class='line'>		<span class="nv">Compare</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">-&gt;</span>
</span><span class='line'>			<span class="nn">io</span><span class="p">:</span><span class="nf">format</span><span class="p">(</span><span class="s">&quot;Start War. </span><span class="si">~p</span><span class="s"> vs </span><span class="si">~p~n</span><span class="s">&quot;</span><span class="p">,[</span><span class="nv">Player1HandH</span><span class="p">,</span> <span class="nv">Player2HandH</span><span class="p">]),</span>
</span><span class='line'>			<span class="n">start_war</span><span class="p">(</span><span class="nv">Player1</span><span class="p">,</span> <span class="nv">Player2</span><span class="p">,</span> <span class="nv">NewPile</span><span class="p">)</span>
</span><span class='line'>	<span class="k">end</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nf">hand_loop</span><span class="p">({</span><span class="nv">Player1</span><span class="p">,</span> <span class="nv">Player1Hand</span><span class="p">},{</span><span class="nv">Player2</span><span class="p">,</span> <span class="nv">Player2Hand</span><span class="p">},</span> <span class="nv">Pile</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>	<span class="k">receive</span>
</span><span class='line'>		<span class="p">{</span><span class="nv">Player1</span><span class="p">,</span> <span class="n">send_hand</span> <span class="p">,[]}</span> <span class="o">-&gt;</span>
</span><span class='line'>			<span class="nn">io</span><span class="p">:</span><span class="nf">format</span><span class="p">(</span><span class="s">&quot;Player 1 is out of cards.</span><span class="si">~n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">[]),</span>
</span><span class='line'>			<span class="n">winner</span><span class="p">(</span><span class="s">&quot;Player 2&quot;</span><span class="p">,</span> <span class="nv">Player2</span><span class="p">,</span> <span class="nv">Player1</span><span class="p">,</span> <span class="nv">Player2Hand</span> <span class="o">++</span> <span class="nv">Pile</span><span class="p">);</span>
</span><span class='line'>		<span class="p">{</span><span class="nv">Player2</span><span class="p">,</span> <span class="n">send_hand</span><span class="p">,[]}</span> <span class="o">-&gt;</span>
</span><span class='line'>			<span class="nn">io</span><span class="p">:</span><span class="nf">format</span><span class="p">(</span><span class="s">&quot;Player 2 is out of cards.</span><span class="si">~n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">[]),</span>
</span><span class='line'>			<span class="n">winner</span><span class="p">(</span><span class="s">&quot;Player 1&quot;</span><span class="p">,</span> <span class="nv">Player1</span><span class="p">,</span> <span class="nv">Player2</span><span class="p">,</span> <span class="nv">Player1Hand</span> <span class="o">++</span> <span class="nv">Pile</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>		<span class="p">{</span><span class="nv">Player1</span><span class="p">,</span> <span class="n">send_hand</span> <span class="p">,</span><span class="nv">Cards</span><span class="p">}</span> <span class="o">-&gt;</span>
</span><span class='line'>			<span class="nn">io</span><span class="p">:</span><span class="nf">format</span><span class="p">(</span><span class="s">&quot;Player 1 sent hand </span><span class="si">~p</span><span class="s">.</span><span class="si">~n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">[</span><span class="nv">Cards</span><span class="p">]),</span>
</span><span class='line'>			<span class="n">await_hand</span><span class="p">({</span><span class="nv">Player1</span><span class="p">,</span> <span class="nv">Cards</span><span class="p">},{</span><span class="nv">Player2</span><span class="p">,</span> <span class="nv">Player2Hand</span><span class="p">},</span> <span class="nv">Pile</span><span class="p">);</span>
</span><span class='line'>		<span class="p">{</span><span class="nv">Player2</span><span class="p">,</span> <span class="n">send_hand</span> <span class="p">,</span><span class="nv">Cards</span><span class="p">}</span> <span class="o">-&gt;</span>
</span><span class='line'>			<span class="nn">io</span><span class="p">:</span><span class="nf">format</span><span class="p">(</span><span class="s">&quot;Player 2 sent hand </span><span class="si">~p</span><span class="s">.</span><span class="si">~n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">[</span><span class="nv">Cards</span><span class="p">]),</span>
</span><span class='line'>			<span class="n">await_hand</span><span class="p">({</span><span class="nv">Player1</span><span class="p">,</span> <span class="nv">Player1Hand</span><span class="p">},{</span><span class="nv">Player2</span><span class="p">,</span> <span class="nv">Cards</span><span class="p">},</span> <span class="nv">Pile</span><span class="p">)</span>
</span><span class='line'>	<span class="k">end</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">get_count</span><span class="p">(</span><span class="nv">Player1</span><span class="p">,</span> <span class="nv">Player2</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>	<span class="nv">Player1</span> <span class="o">!</span> <span class="p">{</span><span class="n">self</span><span class="p">(),</span> <span class="n">send_count</span><span class="p">},</span>
</span><span class='line'>	<span class="nv">Player2</span> <span class="o">!</span> <span class="p">{</span><span class="n">self</span><span class="p">(),</span> <span class="n">send_count</span><span class="p">},</span>
</span><span class='line'>	<span class="n">count_loop</span><span class="p">({</span><span class="nv">Player1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">},</span>
</span><span class='line'>			<span class="p">{</span><span class="nv">Player2</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">}).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">await_count</span><span class="p">({</span><span class="nv">Player1</span><span class="p">,</span> <span class="nv">Player1Count</span><span class="p">},</span>
</span><span class='line'>			<span class="p">{</span><span class="nv">Player2</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">})</span> <span class="o">-&gt;</span>
</span><span class='line'>	<span class="n">count_loop</span><span class="p">({</span><span class="nv">Player1</span><span class="p">,</span> <span class="nv">Player1Count</span><span class="p">},</span>
</span><span class='line'>			<span class="p">{</span><span class="nv">Player2</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nf">await_count</span><span class="p">({</span><span class="nv">Player1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">},</span>
</span><span class='line'>			<span class="p">{</span><span class="nv">Player2</span><span class="p">,</span> <span class="nv">Player2Count</span><span class="p">})</span> <span class="o">-&gt;</span>
</span><span class='line'>	<span class="n">count_loop</span><span class="p">({</span><span class="nv">Player1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">},</span>
</span><span class='line'>			<span class="p">{</span><span class="nv">Player2</span><span class="p">,</span> <span class="nv">Player2Count</span><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nf">await_count</span><span class="p">({</span><span class="nv">Player1</span><span class="p">,</span> <span class="nv">Player1Count</span><span class="p">},</span>
</span><span class='line'>			<span class="p">{</span><span class="nv">Player2</span><span class="p">,</span> <span class="nv">Player2Count</span><span class="p">})</span> <span class="o">-&gt;</span>
</span><span class='line'>	<span class="nn">io</span><span class="p">:</span><span class="nf">format</span><span class="p">(</span><span class="s">&quot;Player 1: </span><span class="si">~p</span><span class="s">, Player 2: </span><span class="si">~p</span><span class="s">.</span><span class="si">~n</span><span class="s">&quot;</span><span class="p">,[</span><span class="nv">Player1Count</span><span class="p">,</span> <span class="nv">Player2Count</span><span class="p">]),</span>
</span><span class='line'>	<span class="n">start_hand</span><span class="p">(</span><span class="nv">Player1</span><span class="p">,</span> <span class="nv">Player2</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">count_loop</span><span class="p">({</span><span class="nv">Player1</span><span class="p">,</span> <span class="nv">Player1Count</span><span class="p">},</span>
</span><span class='line'>			<span class="p">{</span><span class="nv">Player2</span><span class="p">,</span> <span class="nv">Player2Count</span><span class="p">})</span> <span class="o">-&gt;</span>
</span><span class='line'>	<span class="k">receive</span>
</span><span class='line'>		<span class="p">{</span><span class="nv">Player1</span><span class="p">,</span> <span class="n">send_count</span><span class="p">,</span> <span class="nv">Num</span><span class="p">}</span> <span class="o">-&gt;</span>
</span><span class='line'>			<span class="n">await_count</span><span class="p">({</span><span class="nv">Player1</span><span class="p">,</span> <span class="nv">Num</span><span class="p">},{</span><span class="nv">Player2</span><span class="p">,</span> <span class="nv">Player2Count</span><span class="p">});</span>
</span><span class='line'>		<span class="p">{</span><span class="nv">Player2</span><span class="p">,</span> <span class="n">send_count</span><span class="p">,</span> <span class="nv">Num</span><span class="p">}</span> <span class="o">-&gt;</span>
</span><span class='line'>			<span class="n">await_count</span><span class="p">({</span><span class="nv">Player1</span><span class="p">,</span> <span class="nv">Player1Count</span><span class="p">},{</span><span class="nv">Player2</span><span class="p">,</span> <span class="nv">Num</span><span class="p">})</span>
</span><span class='line'>	<span class="k">end</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nf">winner</span><span class="p">(</span><span class="nv">PlayerName</span><span class="p">,</span> <span class="p">_</span><span class="nv">WinningPlayer</span><span class="p">,</span> <span class="p">_</span><span class="nv">LosingPlayer</span><span class="p">,</span> <span class="p">_</span><span class="nv">LootPile</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>	<span class="nn">io</span><span class="p">:</span><span class="nf">format</span><span class="p">(</span><span class="s">&quot;Game Over </span><span class="si">~p</span><span class="s"> Wins!</span><span class="si">~n</span><span class="s">&quot;</span><span class="p">,[</span><span class="nv">PlayerName</span><span class="p">]).</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>I wanted to be able to easily test with a smaller sized deck, like the etude suggested.  I created a war module that takes in the size of the deck and starts up the game.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (war.erl)</span> <a href='/downloads/code/erlang-etudes/ch8/war.erl'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">war</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span> <span class="p">([</span><span class="n">start</span><span class="o">/</span><span class="mi">0</span><span class="p">,</span><span class="n">start</span><span class="o">/</span><span class="mi">1</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">start</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>	<span class="n">start</span><span class="p">(</span><span class="mi">52</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">start</span><span class="p">(</span><span class="nv">NumberOfCards</span><span class="p">)</span> <span class="k">when</span> <span class="nv">NumberOfCards</span> <span class="ow">rem</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">-&gt;</span>
</span><span class='line'>	<span class="nv">Deck</span> <span class="o">=</span> <span class="nn">deck</span><span class="p">:</span><span class="nf">make</span><span class="p">(</span><span class="nv">NumberOfCards</span><span class="p">),</span>
</span><span class='line'>	<span class="nv">Player1</span> <span class="o">=</span> <span class="nb">spawn</span><span class="p">(</span><span class="n">player</span><span class="p">,</span> <span class="n">play</span><span class="p">,</span> <span class="p">[]),</span>
</span><span class='line'>	<span class="nv">Player2</span> <span class="o">=</span> <span class="nb">spawn</span><span class="p">(</span><span class="n">player</span><span class="p">,</span> <span class="n">play</span><span class="p">,</span> <span class="p">[]),</span>
</span><span class='line'>	<span class="nn">dealer</span><span class="p">:</span><span class="nf">deal</span><span class="p">(</span><span class="nv">Deck</span><span class="p">,</span> <span class="nv">Player1</span><span class="p">,</span> <span class="nv">Player2</span><span class="p">).</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Here is an actual game that my simulation outputs:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (output.txt)</span> <a href='/downloads/code/erlang-etudes/ch8/output.txt'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="nv">Eshell</span> <span class="nv">V5</span><span class="p">.</span><span class="mi">10</span><span class="p">.</span><span class="mi">2</span>  <span class="p">(</span><span class="n">abort</span> <span class="n">with</span> <span class="err">^</span><span class="nv">G</span><span class="p">)</span>
</span><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="n">c</span><span class="p">(</span><span class="n">deck</span><span class="p">).</span>
</span><span class='line'><span class="p">{</span><span class="n">ok</span><span class="p">,</span><span class="n">deck</span><span class="p">}</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="n">c</span><span class="p">(</span><span class="n">player</span><span class="p">).</span>
</span><span class='line'><span class="p">{</span><span class="n">ok</span><span class="p">,</span><span class="n">player</span><span class="p">}</span>
</span><span class='line'><span class="mi">3</span><span class="o">&gt;</span> <span class="n">c</span><span class="p">(</span><span class="n">dealer</span><span class="p">).</span>
</span><span class='line'><span class="p">{</span><span class="n">ok</span><span class="p">,</span><span class="n">dealer</span><span class="p">}</span>
</span><span class='line'><span class="mi">4</span><span class="o">&gt;</span> <span class="n">c</span><span class="p">(</span><span class="n">war</span><span class="p">).</span>
</span><span class='line'><span class="p">{</span><span class="n">ok</span><span class="p">,</span><span class="n">war</span><span class="p">}</span>
</span><span class='line'><span class="mi">5</span><span class="o">&gt;</span> <span class="nn">war</span><span class="p">:</span><span class="nf">start</span><span class="p">(</span><span class="mi">16</span><span class="p">).</span>
</span><span class='line'><span class="nv">Player</span> <span class="mi">1</span> <span class="n">sent</span> <span class="n">hand</span> <span class="p">[{</span><span class="mi">8</span><span class="p">,</span><span class="s">&quot;8&quot;</span><span class="p">,</span><span class="s">&quot;Clubs&quot;</span><span class="p">}].</span>
</span><span class='line'><span class="nv">Player</span> <span class="mi">2</span> <span class="n">sent</span> <span class="n">hand</span> <span class="p">[{</span><span class="mi">9</span><span class="p">,</span><span class="s">&quot;9&quot;</span><span class="p">,</span><span class="s">&quot;Hearts&quot;</span><span class="p">}].</span>
</span><span class='line'><span class="nv">Player</span> <span class="mi">2</span> <span class="n">wins</span> <span class="n">hand</span><span class="p">.</span> <span class="p">{</span><span class="mi">8</span><span class="p">,</span><span class="s">&quot;8&quot;</span><span class="p">,</span><span class="s">&quot;Clubs&quot;</span><span class="p">}</span> <span class="n">vs</span> <span class="p">{</span><span class="mi">9</span><span class="p">,</span><span class="s">&quot;9&quot;</span><span class="p">,</span><span class="s">&quot;Hearts&quot;</span><span class="p">}</span>
</span><span class='line'><span class="nv">Player</span> <span class="mi">1</span><span class="p">:</span> <span class="mi">7</span><span class="p">,</span> <span class="nv">Player</span> <span class="mi">2</span><span class="p">:</span> <span class="mi">9</span><span class="p">.</span>
</span><span class='line'><span class="nv">Player</span> <span class="mi">1</span> <span class="n">sent</span> <span class="n">hand</span> <span class="p">[{</span><span class="mi">10</span><span class="p">,</span><span class="s">&quot;10&quot;</span><span class="p">,</span><span class="s">&quot;Spades&quot;</span><span class="p">}].</span>
</span><span class='line'><span class="nv">Player</span> <span class="mi">2</span> <span class="n">sent</span> <span class="n">hand</span> <span class="p">[{</span><span class="mi">8</span><span class="p">,</span><span class="s">&quot;8&quot;</span><span class="p">,</span><span class="s">&quot;Clubs&quot;</span><span class="p">}].</span>
</span><span class='line'><span class="nv">Player</span> <span class="mi">1</span> <span class="n">wins</span> <span class="n">hand</span><span class="p">.</span> <span class="p">{</span><span class="mi">10</span><span class="p">,</span><span class="s">&quot;10&quot;</span><span class="p">,</span><span class="s">&quot;Spades&quot;</span><span class="p">}</span> <span class="n">vs</span> <span class="p">{</span><span class="mi">8</span><span class="p">,</span><span class="s">&quot;8&quot;</span><span class="p">,</span><span class="s">&quot;Clubs&quot;</span><span class="p">}</span>
</span><span class='line'><span class="nv">Player</span> <span class="mi">1</span><span class="p">:</span> <span class="mi">8</span><span class="p">,</span> <span class="nv">Player</span> <span class="mi">2</span><span class="p">:</span> <span class="mi">8</span><span class="p">.</span>
</span><span class='line'><span class="nv">Player</span> <span class="mi">1</span> <span class="n">sent</span> <span class="n">hand</span> <span class="p">[{</span><span class="mi">10</span><span class="p">,</span><span class="s">&quot;10&quot;</span><span class="p">,</span><span class="s">&quot;Spades&quot;</span><span class="p">}].</span>
</span><span class='line'><span class="nv">Player</span> <span class="mi">2</span> <span class="n">sent</span> <span class="n">hand</span> <span class="p">[{</span><span class="mi">9</span><span class="p">,</span><span class="s">&quot;9&quot;</span><span class="p">,</span><span class="s">&quot;Hearts&quot;</span><span class="p">}].</span>
</span><span class='line'><span class="nv">Player</span> <span class="mi">1</span> <span class="n">wins</span> <span class="n">hand</span><span class="p">.</span> <span class="p">{</span><span class="mi">10</span><span class="p">,</span><span class="s">&quot;10&quot;</span><span class="p">,</span><span class="s">&quot;Spades&quot;</span><span class="p">}</span> <span class="n">vs</span> <span class="p">{</span><span class="mi">9</span><span class="p">,</span><span class="s">&quot;9&quot;</span><span class="p">,</span><span class="s">&quot;Hearts&quot;</span><span class="p">}</span>
</span><span class='line'><span class="nv">Player</span> <span class="mi">1</span><span class="p">:</span> <span class="mi">9</span><span class="p">,</span> <span class="nv">Player</span> <span class="mi">2</span><span class="p">:</span> <span class="mi">7</span><span class="p">.</span>
</span><span class='line'><span class="nv">Player</span> <span class="mi">1</span> <span class="n">sent</span> <span class="n">hand</span> <span class="p">[{</span><span class="mi">10</span><span class="p">,</span><span class="s">&quot;10&quot;</span><span class="p">,</span><span class="s">&quot;Spades&quot;</span><span class="p">}].</span>
</span><span class='line'><span class="nv">Player</span> <span class="mi">2</span> <span class="n">sent</span> <span class="n">hand</span> <span class="p">[{</span><span class="mi">12</span><span class="p">,</span><span class="s">&quot;Q&quot;</span><span class="p">,</span><span class="s">&quot;Clubs&quot;</span><span class="p">}].</span>
</span><span class='line'><span class="nv">Player</span> <span class="mi">2</span> <span class="n">wins</span> <span class="n">hand</span><span class="p">.</span> <span class="p">{</span><span class="mi">10</span><span class="p">,</span><span class="s">&quot;10&quot;</span><span class="p">,</span><span class="s">&quot;Spades&quot;</span><span class="p">}</span> <span class="n">vs</span> <span class="p">{</span><span class="mi">12</span><span class="p">,</span><span class="s">&quot;Q&quot;</span><span class="p">,</span><span class="s">&quot;Clubs&quot;</span><span class="p">}</span>
</span><span class='line'><span class="nv">Player</span> <span class="mi">1</span><span class="p">:</span> <span class="mi">8</span><span class="p">,</span> <span class="nv">Player</span> <span class="mi">2</span><span class="p">:</span> <span class="mi">8</span><span class="p">.</span>
</span><span class='line'><span class="nv">Player</span> <span class="mi">1</span> <span class="n">sent</span> <span class="n">hand</span> <span class="p">[{</span><span class="mi">9</span><span class="p">,</span><span class="s">&quot;9&quot;</span><span class="p">,</span><span class="s">&quot;Hearts&quot;</span><span class="p">}].</span>
</span><span class='line'><span class="nv">Player</span> <span class="mi">2</span> <span class="n">sent</span> <span class="n">hand</span> <span class="p">[{</span><span class="mi">10</span><span class="p">,</span><span class="s">&quot;10&quot;</span><span class="p">,</span><span class="s">&quot;Spades&quot;</span><span class="p">}].</span>
</span><span class='line'><span class="nv">Player</span> <span class="mi">2</span> <span class="n">wins</span> <span class="n">hand</span><span class="p">.</span> <span class="p">{</span><span class="mi">9</span><span class="p">,</span><span class="s">&quot;9&quot;</span><span class="p">,</span><span class="s">&quot;Hearts&quot;</span><span class="p">}</span> <span class="n">vs</span> <span class="p">{</span><span class="mi">10</span><span class="p">,</span><span class="s">&quot;10&quot;</span><span class="p">,</span><span class="s">&quot;Spades&quot;</span><span class="p">}</span>
</span><span class='line'><span class="nv">Player</span> <span class="mi">1</span><span class="p">:</span> <span class="mi">7</span><span class="p">,</span> <span class="nv">Player</span> <span class="mi">2</span><span class="p">:</span> <span class="mi">9</span><span class="p">.</span>
</span><span class='line'><span class="nv">Player</span> <span class="mi">1</span> <span class="n">sent</span> <span class="n">hand</span> <span class="p">[{</span><span class="mi">8</span><span class="p">,</span><span class="s">&quot;8&quot;</span><span class="p">,</span><span class="s">&quot;Clubs&quot;</span><span class="p">}].</span>
</span><span class='line'><span class="nv">Player</span> <span class="mi">2</span> <span class="n">sent</span> <span class="n">hand</span> <span class="p">[{</span><span class="mi">9</span><span class="p">,</span><span class="s">&quot;9&quot;</span><span class="p">,</span><span class="s">&quot;Hearts&quot;</span><span class="p">}].</span>
</span><span class='line'><span class="nv">Player</span> <span class="mi">2</span> <span class="n">wins</span> <span class="n">hand</span><span class="p">.</span> <span class="p">{</span><span class="mi">8</span><span class="p">,</span><span class="s">&quot;8&quot;</span><span class="p">,</span><span class="s">&quot;Clubs&quot;</span><span class="p">}</span> <span class="n">vs</span> <span class="p">{</span><span class="mi">9</span><span class="p">,</span><span class="s">&quot;9&quot;</span><span class="p">,</span><span class="s">&quot;Hearts&quot;</span><span class="p">}</span>
</span><span class='line'><span class="nv">Player</span> <span class="mi">1</span><span class="p">:</span> <span class="mi">6</span><span class="p">,</span> <span class="nv">Player</span> <span class="mi">2</span><span class="p">:</span> <span class="mi">10</span><span class="p">.</span>
</span><span class='line'><span class="nv">Player</span> <span class="mi">1</span> <span class="n">sent</span> <span class="n">hand</span> <span class="p">[{</span><span class="mi">6</span><span class="p">,</span><span class="s">&quot;6&quot;</span><span class="p">,</span><span class="s">&quot;Diamonds&quot;</span><span class="p">}].</span>
</span><span class='line'><span class="nv">Player</span> <span class="mi">2</span> <span class="n">sent</span> <span class="n">hand</span> <span class="p">[{</span><span class="mi">8</span><span class="p">,</span><span class="s">&quot;8&quot;</span><span class="p">,</span><span class="s">&quot;Clubs&quot;</span><span class="p">}].</span>
</span><span class='line'><span class="nv">Player</span> <span class="mi">2</span> <span class="n">wins</span> <span class="n">hand</span><span class="p">.</span> <span class="p">{</span><span class="mi">6</span><span class="p">,</span><span class="s">&quot;6&quot;</span><span class="p">,</span><span class="s">&quot;Diamonds&quot;</span><span class="p">}</span> <span class="n">vs</span> <span class="p">{</span><span class="mi">8</span><span class="p">,</span><span class="s">&quot;8&quot;</span><span class="p">,</span><span class="s">&quot;Clubs&quot;</span><span class="p">}</span>
</span><span class='line'><span class="nv">Player</span> <span class="mi">1</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span> <span class="nv">Player</span> <span class="mi">2</span><span class="p">:</span> <span class="mi">11</span><span class="p">.</span>
</span><span class='line'><span class="nv">Player</span> <span class="mi">1</span> <span class="n">sent</span> <span class="n">hand</span> <span class="p">[{</span><span class="mi">8</span><span class="p">,</span><span class="s">&quot;8&quot;</span><span class="p">,</span><span class="s">&quot;Spades&quot;</span><span class="p">}].</span>
</span><span class='line'><span class="nv">Player</span> <span class="mi">2</span> <span class="n">sent</span> <span class="n">hand</span> <span class="p">[{</span><span class="mi">6</span><span class="p">,</span><span class="s">&quot;6&quot;</span><span class="p">,</span><span class="s">&quot;Diamonds&quot;</span><span class="p">}].</span>
</span><span class='line'><span class="nv">Player</span> <span class="mi">1</span> <span class="n">wins</span> <span class="n">hand</span><span class="p">.</span> <span class="p">{</span><span class="mi">8</span><span class="p">,</span><span class="s">&quot;8&quot;</span><span class="p">,</span><span class="s">&quot;Spades&quot;</span><span class="p">}</span> <span class="n">vs</span> <span class="p">{</span><span class="mi">6</span><span class="p">,</span><span class="s">&quot;6&quot;</span><span class="p">,</span><span class="s">&quot;Diamonds&quot;</span><span class="p">}</span>
</span><span class='line'><span class="nv">Player</span> <span class="mi">1</span><span class="p">:</span> <span class="mi">6</span><span class="p">,</span> <span class="nv">Player</span> <span class="mi">2</span><span class="p">:</span> <span class="mi">10</span><span class="p">.</span>
</span><span class='line'><span class="nv">Player</span> <span class="mi">1</span> <span class="n">sent</span> <span class="n">hand</span> <span class="p">[{</span><span class="mi">8</span><span class="p">,</span><span class="s">&quot;8&quot;</span><span class="p">,</span><span class="s">&quot;Spades&quot;</span><span class="p">}].</span>
</span><span class='line'><span class="nv">Player</span> <span class="mi">2</span> <span class="n">sent</span> <span class="n">hand</span> <span class="p">[{</span><span class="mi">8</span><span class="p">,</span><span class="s">&quot;8&quot;</span><span class="p">,</span><span class="s">&quot;Clubs&quot;</span><span class="p">}].</span>
</span><span class='line'><span class="nv">Start</span> <span class="nv">War</span><span class="p">.</span> <span class="p">{</span><span class="mi">8</span><span class="p">,</span><span class="s">&quot;8&quot;</span><span class="p">,</span><span class="s">&quot;Spades&quot;</span><span class="p">}</span> <span class="n">vs</span> <span class="p">{</span><span class="mi">8</span><span class="p">,</span><span class="s">&quot;8&quot;</span><span class="p">,</span><span class="s">&quot;Clubs&quot;</span><span class="p">}</span>
</span><span class='line'><span class="nv">Player</span> <span class="mi">2</span> <span class="n">sent</span> <span class="n">hand</span> <span class="p">[{</span><span class="mi">9</span><span class="p">,</span><span class="s">&quot;9&quot;</span><span class="p">,</span><span class="s">&quot;Hearts&quot;</span><span class="p">},{</span><span class="mi">10</span><span class="p">,</span><span class="s">&quot;10&quot;</span><span class="p">,</span><span class="s">&quot;Spades&quot;</span><span class="p">},{</span><span class="mi">12</span><span class="p">,</span><span class="s">&quot;Q&quot;</span><span class="p">,</span><span class="s">&quot;Clubs&quot;</span><span class="p">}].</span>
</span><span class='line'><span class="nv">Player</span> <span class="mi">1</span> <span class="n">sent</span> <span class="n">hand</span> <span class="p">[{</span><span class="mi">6</span><span class="p">,</span><span class="s">&quot;6&quot;</span><span class="p">,</span><span class="s">&quot;Diamonds&quot;</span><span class="p">},</span>
</span><span class='line'>                    <span class="p">{</span><span class="mi">10</span><span class="p">,</span><span class="s">&quot;10&quot;</span><span class="p">,</span><span class="s">&quot;Diamonds&quot;</span><span class="p">},</span>
</span><span class='line'>                    <span class="p">{</span><span class="mi">13</span><span class="p">,</span><span class="s">&quot;K&quot;</span><span class="p">,</span><span class="s">&quot;Diamonds&quot;</span><span class="p">}].</span>
</span><span class='line'><span class="nv">Player</span> <span class="mi">1</span> <span class="n">wins</span> <span class="n">hand</span><span class="p">.</span> <span class="p">{</span><span class="mi">13</span><span class="p">,</span><span class="s">&quot;K&quot;</span><span class="p">,</span><span class="s">&quot;Diamonds&quot;</span><span class="p">}</span> <span class="n">vs</span> <span class="p">{</span><span class="mi">12</span><span class="p">,</span><span class="s">&quot;Q&quot;</span><span class="p">,</span><span class="s">&quot;Clubs&quot;</span><span class="p">}</span>
</span><span class='line'><span class="nv">Player</span> <span class="mi">1</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span> <span class="nv">Player</span> <span class="mi">2</span><span class="p">:</span> <span class="mi">6</span><span class="p">.</span>
</span><span class='line'><span class="nv">Player</span> <span class="mi">1</span> <span class="n">sent</span> <span class="n">hand</span> <span class="p">[{</span><span class="mi">8</span><span class="p">,</span><span class="s">&quot;8&quot;</span><span class="p">,</span><span class="s">&quot;Spades&quot;</span><span class="p">}].</span>
</span><span class='line'><span class="nv">Player</span> <span class="mi">2</span> <span class="n">sent</span> <span class="n">hand</span> <span class="p">[{</span><span class="mi">11</span><span class="p">,</span><span class="s">&quot;J&quot;</span><span class="p">,</span><span class="s">&quot;Spades&quot;</span><span class="p">}].</span>
</span><span class='line'><span class="nv">Player</span> <span class="mi">2</span> <span class="n">wins</span> <span class="n">hand</span><span class="p">.</span> <span class="p">{</span><span class="mi">8</span><span class="p">,</span><span class="s">&quot;8&quot;</span><span class="p">,</span><span class="s">&quot;Spades&quot;</span><span class="p">}</span> <span class="n">vs</span> <span class="p">{</span><span class="mi">11</span><span class="p">,</span><span class="s">&quot;J&quot;</span><span class="p">,</span><span class="s">&quot;Spades&quot;</span><span class="p">}</span>
</span><span class='line'><span class="nv">Player</span> <span class="mi">1</span><span class="p">:</span> <span class="mi">9</span><span class="p">,</span> <span class="nv">Player</span> <span class="mi">2</span><span class="p">:</span> <span class="mi">7</span><span class="p">.</span>
</span><span class='line'><span class="nv">Player</span> <span class="mi">1</span> <span class="n">sent</span> <span class="n">hand</span> <span class="p">[{</span><span class="mi">8</span><span class="p">,</span><span class="s">&quot;8&quot;</span><span class="p">,</span><span class="s">&quot;Clubs&quot;</span><span class="p">}].</span>
</span><span class='line'><span class="nv">Player</span> <span class="mi">2</span> <span class="n">sent</span> <span class="n">hand</span> <span class="p">[{</span><span class="mi">8</span><span class="p">,</span><span class="s">&quot;8&quot;</span><span class="p">,</span><span class="s">&quot;Spades&quot;</span><span class="p">}].</span>
</span><span class='line'><span class="nv">Start</span> <span class="nv">War</span><span class="p">.</span> <span class="p">{</span><span class="mi">8</span><span class="p">,</span><span class="s">&quot;8&quot;</span><span class="p">,</span><span class="s">&quot;Clubs&quot;</span><span class="p">}</span> <span class="n">vs</span> <span class="p">{</span><span class="mi">8</span><span class="p">,</span><span class="s">&quot;8&quot;</span><span class="p">,</span><span class="s">&quot;Spades&quot;</span><span class="p">}</span>
</span><span class='line'><span class="nv">Player</span> <span class="mi">1</span> <span class="n">sent</span> <span class="n">hand</span> <span class="p">[{</span><span class="mi">13</span><span class="p">,</span><span class="s">&quot;K&quot;</span><span class="p">,</span><span class="s">&quot;Diamonds&quot;</span><span class="p">},</span>
</span><span class='line'>                    <span class="p">{</span><span class="mi">10</span><span class="p">,</span><span class="s">&quot;10&quot;</span><span class="p">,</span><span class="s">&quot;Diamonds&quot;</span><span class="p">},</span>
</span><span class='line'>                    <span class="p">{</span><span class="mi">6</span><span class="p">,</span><span class="s">&quot;6&quot;</span><span class="p">,</span><span class="s">&quot;Diamonds&quot;</span><span class="p">}].</span>
</span><span class='line'><span class="nv">Player</span> <span class="mi">2</span> <span class="n">sent</span> <span class="n">hand</span> <span class="p">[{</span><span class="mi">11</span><span class="p">,</span><span class="s">&quot;J&quot;</span><span class="p">,</span><span class="s">&quot;Spades&quot;</span><span class="p">},{</span><span class="mi">14</span><span class="p">,</span><span class="s">&quot;A&quot;</span><span class="p">,</span><span class="s">&quot;Hearts&quot;</span><span class="p">},{</span><span class="mi">5</span><span class="p">,</span><span class="s">&quot;5&quot;</span><span class="p">,</span><span class="s">&quot;Clubs&quot;</span><span class="p">}].</span>
</span><span class='line'><span class="nv">Player</span> <span class="mi">1</span> <span class="n">wins</span> <span class="n">hand</span><span class="p">.</span> <span class="p">{</span><span class="mi">6</span><span class="p">,</span><span class="s">&quot;6&quot;</span><span class="p">,</span><span class="s">&quot;Diamonds&quot;</span><span class="p">}</span> <span class="n">vs</span> <span class="p">{</span><span class="mi">5</span><span class="p">,</span><span class="s">&quot;5&quot;</span><span class="p">,</span><span class="s">&quot;Clubs&quot;</span><span class="p">}</span>
</span><span class='line'><span class="nv">Player</span> <span class="mi">1</span><span class="p">:</span> <span class="mi">13</span><span class="p">,</span> <span class="nv">Player</span> <span class="mi">2</span><span class="p">:</span> <span class="mi">3</span><span class="p">.</span>
</span><span class='line'><span class="nv">Player</span> <span class="mi">1</span> <span class="n">sent</span> <span class="n">hand</span> <span class="p">[{</span><span class="mi">8</span><span class="p">,</span><span class="s">&quot;8&quot;</span><span class="p">,</span><span class="s">&quot;Clubs&quot;</span><span class="p">}].</span>
</span><span class='line'><span class="nv">Player</span> <span class="mi">2</span> <span class="n">sent</span> <span class="n">hand</span> <span class="p">[{</span><span class="mi">3</span><span class="p">,</span><span class="s">&quot;3&quot;</span><span class="p">,</span><span class="s">&quot;Hearts&quot;</span><span class="p">}].</span>
</span><span class='line'><span class="nv">Player</span> <span class="mi">1</span> <span class="n">wins</span> <span class="n">hand</span><span class="p">.</span> <span class="p">{</span><span class="mi">8</span><span class="p">,</span><span class="s">&quot;8&quot;</span><span class="p">,</span><span class="s">&quot;Clubs&quot;</span><span class="p">}</span> <span class="n">vs</span> <span class="p">{</span><span class="mi">3</span><span class="p">,</span><span class="s">&quot;3&quot;</span><span class="p">,</span><span class="s">&quot;Hearts&quot;</span><span class="p">}</span>
</span><span class='line'><span class="nv">Player</span> <span class="mi">1</span><span class="p">:</span> <span class="mi">14</span><span class="p">,</span> <span class="nv">Player</span> <span class="mi">2</span><span class="p">:</span> <span class="mi">2</span><span class="p">.</span>
</span><span class='line'><span class="nv">Player</span> <span class="mi">1</span> <span class="n">sent</span> <span class="n">hand</span> <span class="p">[{</span><span class="mi">8</span><span class="p">,</span><span class="s">&quot;8&quot;</span><span class="p">,</span><span class="s">&quot;Clubs&quot;</span><span class="p">}].</span>
</span><span class='line'><span class="nv">Player</span> <span class="mi">2</span> <span class="n">sent</span> <span class="n">hand</span> <span class="p">[{</span><span class="mi">3</span><span class="p">,</span><span class="s">&quot;3&quot;</span><span class="p">,</span><span class="s">&quot;Clubs&quot;</span><span class="p">}].</span>
</span><span class='line'><span class="nv">Player</span> <span class="mi">1</span> <span class="n">wins</span> <span class="n">hand</span><span class="p">.</span> <span class="p">{</span><span class="mi">8</span><span class="p">,</span><span class="s">&quot;8&quot;</span><span class="p">,</span><span class="s">&quot;Clubs&quot;</span><span class="p">}</span> <span class="n">vs</span> <span class="p">{</span><span class="mi">3</span><span class="p">,</span><span class="s">&quot;3&quot;</span><span class="p">,</span><span class="s">&quot;Clubs&quot;</span><span class="p">}</span>
</span><span class='line'><span class="nv">Player</span> <span class="mi">1</span><span class="p">:</span> <span class="mi">15</span><span class="p">,</span> <span class="nv">Player</span> <span class="mi">2</span><span class="p">:</span> <span class="mi">1</span><span class="p">.</span>
</span><span class='line'><span class="nv">Player</span> <span class="mi">1</span> <span class="n">sent</span> <span class="n">hand</span> <span class="p">[{</span><span class="mi">8</span><span class="p">,</span><span class="s">&quot;8&quot;</span><span class="p">,</span><span class="s">&quot;Clubs&quot;</span><span class="p">}].</span>
</span><span class='line'><span class="nv">Player</span> <span class="mi">2</span> <span class="n">sent</span> <span class="n">hand</span> <span class="p">[{</span><span class="mi">2</span><span class="p">,</span><span class="s">&quot;2&quot;</span><span class="p">,</span><span class="s">&quot;Spades&quot;</span><span class="p">}].</span>
</span><span class='line'><span class="nv">Player</span> <span class="mi">1</span> <span class="n">wins</span> <span class="n">hand</span><span class="p">.</span> <span class="p">{</span><span class="mi">8</span><span class="p">,</span><span class="s">&quot;8&quot;</span><span class="p">,</span><span class="s">&quot;Clubs&quot;</span><span class="p">}</span> <span class="n">vs</span> <span class="p">{</span><span class="mi">2</span><span class="p">,</span><span class="s">&quot;2&quot;</span><span class="p">,</span><span class="s">&quot;Spades&quot;</span><span class="p">}</span>
</span><span class='line'><span class="nv">Player</span> <span class="mi">1</span><span class="p">:</span> <span class="mi">16</span><span class="p">,</span> <span class="nv">Player</span> <span class="mi">2</span><span class="p">:</span> <span class="mi">0</span><span class="p">.</span>
</span><span class='line'><span class="nv">Player</span> <span class="mi">1</span> <span class="n">sent</span> <span class="n">hand</span> <span class="p">[{</span><span class="mi">8</span><span class="p">,</span><span class="s">&quot;8&quot;</span><span class="p">,</span><span class="s">&quot;Clubs&quot;</span><span class="p">}].</span>
</span><span class='line'><span class="nv">Player</span> <span class="mi">2</span> <span class="n">is</span> <span class="n">out</span> <span class="k">of</span> <span class="n">cards</span><span class="p">.</span>
</span><span class='line'><span class="nv">Game</span> <span class="nv">Over</span> <span class="s">&quot;Player 1&quot;</span> <span class="nv">Wins</span><span class="o">!</span>
</span><span class='line'><span class="n">ok</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>If you want to see a different and probably better solution check out the solution in the book: <a href="http://chimera.labs.oreilly.com/books/1234000000726/apa.html#_literal_game_erl_literal">Game.erl</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ã‰tudes for Erlang - CH 7]]></title>
    <link href="http://connor311.github.io/2013/07/15/etudes-for-erlang-ch-7/"/>
    <updated>2013-07-15T22:58:00+00:00</updated>
    <id>http://connor311.github.io/2013/07/15/etudes-for-erlang-ch-7</id>
    <content type="html"><![CDATA[<p>I have been working double duty tonight, since I have been slacking on my blogging duty.  I am again slacking, I am going to skip from <a href="/2013/07/08/etudes-for-erlang-ch-5/">chapter 5</a> to chapter 6 for now. <!-- more --></p>

<h2>Chapter 7: Higher Order Functions and List Comprehensions</h2>

<p><a href="http://chimera.labs.oreilly.com/books/1234000000726/ch07.html">link</a></p>

<p>This etude starts off freshman HS year style, with a little calculus!  It is asking us to create a method that determines the derivative of an anonymous function.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (calculus.erl)</span> <a href='/downloads/code/erlang-etudes/ch7/calculus.erl'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">calculus</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">derivative</span><span class="o">/</span><span class="mi">2</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nf">derivative</span><span class="p">(</span><span class="nv">Func</span><span class="p">,</span> <span class="nv">X</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>	<span class="n">derivative</span><span class="p">(</span><span class="nv">Func</span><span class="p">,</span> <span class="nv">X</span><span class="p">,</span> <span class="mi">1</span><span class="p">.</span><span class="mi">0</span><span class="n">e</span><span class="o">-</span><span class="mi">10</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">derivative</span><span class="p">(</span><span class="nv">Func</span><span class="p">,</span> <span class="nv">X</span><span class="p">,</span> <span class="nv">Delta</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>	<span class="p">(</span><span class="nv">Func</span><span class="p">(</span><span class="nv">X</span> <span class="o">+</span> <span class="nv">Delta</span><span class="p">)</span> <span class="o">-</span> <span class="nv">Func</span><span class="p">(</span><span class="nv">X</span><span class="p">))</span> <span class="o">/</span> <span class="nv">Delta</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The next exercise is pushing our understanding of what we can do with <a href="http://www.erlang.org/doc/programming_examples/list_comprehensions.html">list comprehensions</a>.  It asks if it is possible to use pattern matching and list comprehension together?  I think YES.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (people.erl)</span> <a href='/downloads/code/erlang-etudes/ch7/people.erl'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">people</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">part_one</span><span class="o">/</span><span class="mi">0</span>
</span><span class='line'>	<span class="p">,</span><span class="n">part_two</span><span class="o">/</span><span class="mi">0</span>
</span><span class='line'>	<span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">people_list</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>	<span class="p">[{</span><span class="s">&quot;Federico&quot;</span><span class="p">,</span> <span class="sc">$M</span><span class="p">,</span> <span class="mi">22</span><span class="p">},</span>
</span><span class='line'>	 <span class="p">{</span><span class="s">&quot;Kim&quot;</span><span class="p">,</span> <span class="sc">$F</span><span class="p">,</span> <span class="mi">45</span><span class="p">},</span>
</span><span class='line'>	  <span class="p">{</span><span class="s">&quot;Hansa&quot;</span><span class="p">,</span> <span class="sc">$F</span><span class="p">,</span> <span class="mi">30</span><span class="p">},</span>
</span><span class='line'>	 <span class="p">{</span><span class="s">&quot;Tran&quot;</span><span class="p">,</span> <span class="sc">$M</span><span class="p">,</span> <span class="mi">47</span><span class="p">},</span>
</span><span class='line'>	  <span class="p">{</span><span class="s">&quot;Cathy&quot;</span><span class="p">,</span> <span class="sc">$F</span><span class="p">,</span> <span class="mi">32</span><span class="p">},</span>
</span><span class='line'>	   <span class="p">{</span><span class="s">&quot;Elias&quot;</span><span class="p">,</span> <span class="sc">$M</span><span class="p">,</span> <span class="mi">50</span><span class="p">}].</span>
</span><span class='line'>
</span><span class='line'><span class="nf">part_one</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>	<span class="p">[{</span><span class="nv">Name</span><span class="p">,</span> <span class="nv">Gender</span><span class="p">,</span> <span class="nv">Age</span><span class="p">}</span> <span class="p">||</span> <span class="p">{</span><span class="nv">Name</span><span class="p">,</span> <span class="nv">Gender</span><span class="p">,</span> <span class="nv">Age</span><span class="p">}</span> <span class="o">&lt;-</span> <span class="n">people_list</span><span class="p">(),</span> <span class="nv">Gender</span> <span class="o">==</span> <span class="sc">$M</span><span class="p">,</span> <span class="nv">Age</span> <span class="o">&gt;</span> <span class="mi">40</span><span class="p">].</span>
</span><span class='line'>
</span><span class='line'><span class="nf">part_two</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>	<span class="p">[{</span><span class="nv">Name</span><span class="p">,</span> <span class="nv">Gender</span><span class="p">,</span> <span class="nv">Age</span><span class="p">}</span> <span class="p">||</span> <span class="p">{</span><span class="nv">Name</span><span class="p">,</span> <span class="nv">Gender</span><span class="p">,</span> <span class="nv">Age</span><span class="p">}</span> <span class="o">&lt;-</span> <span class="n">people_list</span><span class="p">(),</span> <span class="p">(</span><span class="nv">Gender</span> <span class="o">==</span> <span class="sc">$M</span><span class="p">)</span> <span class="ow">or</span> <span class="p">(</span><span class="nv">Age</span> <span class="o">&gt;</span> <span class="mi">40</span><span class="p">)].</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>I am starting to notice a pattern with this chapter, and I think it is lists.  Next we get to finally use some functions implemented by the framework, and not have to implement them ourselves.  The function that gets the privalige of our attention first is: lists:foldl/3. Don&rsquo;t exactly know why there is an l at the end, scratch that just looked it <a href="http://www.erlang.org/doc/man/lists.html#foldr-3">up</a>.  It seems as though you can pick which direction you want to fold the list up, which makes sense.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (stats.erl)</span> <a href='/downloads/code/erlang-etudes/ch7/stats.erl'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">stats</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">mean</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span><span class="n">stdv</span><span class="o">/</span><span class="mi">1</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">mean</span><span class="p">([])</span> <span class="o">-&gt;</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="nf">mean</span><span class="p">(</span><span class="nv">List</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>	<span class="nv">Length</span> <span class="o">=</span> <span class="nb">length</span><span class="p">(</span><span class="nv">List</span><span class="p">),</span>
</span><span class='line'>	<span class="nv">Sum</span> <span class="o">=</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">foldl</span><span class="p">(</span><span class="k">fun</span><span class="p">(</span><span class="nv">X</span><span class="p">,</span> <span class="nv">Acc</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nv">X</span> <span class="o">+</span> <span class="nv">Acc</span> <span class="k">end</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">List</span><span class="p">),</span>
</span><span class='line'>	<span class="nv">Sum</span> <span class="o">/</span> <span class="nv">Length</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">stdv</span><span class="p">([])</span> <span class="o">-&gt;</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="nf">stdv</span><span class="p">(</span><span class="nv">List</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>	<span class="nv">Length</span> <span class="o">=</span> <span class="nb">length</span><span class="p">(</span><span class="nv">List</span><span class="p">),</span>
</span><span class='line'>	<span class="nv">Sum</span> <span class="o">=</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">foldl</span><span class="p">(</span><span class="k">fun</span><span class="p">(</span><span class="nv">X</span><span class="p">,</span> <span class="nv">Acc</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nv">X</span> <span class="o">+</span> <span class="nv">Acc</span> <span class="k">end</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">List</span><span class="p">),</span>
</span><span class='line'>	<span class="nv">Sum_Of_Squares</span> <span class="o">=</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">foldl</span><span class="p">(</span><span class="k">fun</span><span class="p">(</span><span class="nv">X</span><span class="p">,</span> <span class="nv">Acc</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="nv">X</span><span class="o">*</span><span class="nv">X</span><span class="p">)</span> <span class="o">+</span> <span class="nv">Acc</span> <span class="k">end</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">List</span><span class="p">),</span>
</span><span class='line'>	<span class="nv">Step5</span> <span class="o">=</span> <span class="p">(</span><span class="nv">Length</span> <span class="o">*</span> <span class="nv">Sum_Of_Squares</span><span class="p">)</span> <span class="o">-</span> <span class="p">(</span><span class="nv">Sum</span> <span class="o">*</span> <span class="nv">Sum</span><span class="p">),</span>
</span><span class='line'>	<span class="nv">Step6</span> <span class="o">=</span> <span class="nv">Step5</span> <span class="o">/</span> <span class="p">(</span><span class="nv">Length</span> <span class="o">*</span> <span class="p">(</span><span class="nv">Length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)),</span>
</span><span class='line'>	<span class="nn">math</span><span class="p">:</span><span class="nf">sqrt</span><span class="p">(</span><span class="nv">Step6</span><span class="p">).</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>More list workâ€¦</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (list_test.erl)</span> <a href='/downloads/code/erlang-etudes/ch7/list_test.erl'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">list_test</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">seven_four</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span><span class="n">seven_five</span><span class="o">/</span><span class="mi">0</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">seven_four</span><span class="p">(</span><span class="n">test1</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>	<span class="nn">lists</span><span class="p">:</span><span class="nf">split</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="p">[</span><span class="mi">110</span><span class="p">,</span><span class="mi">220</span><span class="p">,</span><span class="mi">330</span><span class="p">,</span><span class="mi">440</span><span class="p">,</span><span class="mi">550</span><span class="p">,</span><span class="mi">660</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'><span class="nf">seven_four</span><span class="p">(</span><span class="n">test2</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>	<span class="nn">lists</span><span class="p">:</span><span class="nf">split</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="p">[</span><span class="mi">110</span><span class="p">,</span><span class="mi">220</span><span class="p">,</span><span class="mi">330</span><span class="p">,</span><span class="mi">440</span><span class="p">,</span><span class="mi">550</span><span class="p">,</span><span class="mi">660</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">seven_five</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>	<span class="p">[</span><span class="nv">X</span> <span class="o">*</span> <span class="nv">Y</span> <span class="p">||</span> <span class="nv">X</span> <span class="o">&lt;-</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">],</span> <span class="nv">Y</span> <span class="o">&lt;-</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">]].</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Have you been waiting for an exercise that kinda sorta had a real world feel to it?  Well prepare to have you real world socks, get barely dirty but still dirty!</p>

<p>We will now use what we have learned about list comprehension to create a deck of cards!  We also get to figure out how a pre-defined function works, then comment it. Junior Software Engineer in each of us just sighed a little, I know you did don&rsquo;t act like you were never assigned this task!</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (deck.erl)</span> <a href='/downloads/code/erlang-etudes/ch7/deck.erl'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">deck</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">make_deck</span><span class="o">/</span><span class="mi">0</span><span class="p">,</span><span class="n">show_deck</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span> <span class="n">shuffle</span><span class="o">/</span><span class="mi">1</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">make_deck</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>	<span class="nv">Cards</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;A&quot;</span><span class="p">,</span><span class="s">&quot;2&quot;</span><span class="p">,</span><span class="s">&quot;3&quot;</span><span class="p">,</span><span class="s">&quot;4&quot;</span><span class="p">,</span><span class="s">&quot;5&quot;</span><span class="p">,</span><span class="s">&quot;6&quot;</span><span class="p">,</span><span class="s">&quot;7&quot;</span><span class="p">,</span><span class="s">&quot;8&quot;</span><span class="p">,</span><span class="s">&quot;9&quot;</span><span class="p">,</span><span class="s">&quot;10&quot;</span><span class="p">,</span><span class="s">&quot;J&quot;</span><span class="p">,</span><span class="s">&quot;Q&quot;</span><span class="p">,</span><span class="s">&quot;K&quot;</span><span class="p">],</span>
</span><span class='line'>	<span class="nv">Suits</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;Clubs&quot;</span><span class="p">,</span><span class="s">&quot;Diamonds&quot;</span><span class="p">,</span><span class="s">&quot;Hearts&quot;</span><span class="p">,</span><span class="s">&quot;Spades&quot;</span><span class="p">],</span>
</span><span class='line'>	<span class="p">[{</span><span class="nv">Card</span><span class="p">,</span> <span class="nv">Suit</span><span class="p">}</span> <span class="p">||</span> <span class="nv">Card</span> <span class="o">&lt;-</span> <span class="nv">Cards</span><span class="p">,</span> <span class="nv">Suit</span> <span class="o">&lt;-</span> <span class="nv">Suits</span><span class="p">].</span>
</span><span class='line'>
</span><span class='line'><span class="nf">show_deck</span><span class="p">(</span><span class="nv">Deck</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>	<span class="nn">lists</span><span class="p">:</span><span class="nf">foreach</span><span class="p">(</span><span class="k">fun</span><span class="p">(</span><span class="nv">Card</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nn">io</span><span class="p">:</span><span class="nf">format</span><span class="p">(</span><span class="s">&quot;</span><span class="si">~p~n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">[</span><span class="nv">Card</span><span class="p">])</span> <span class="k">end</span><span class="p">,</span> <span class="nv">Deck</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%%%</span>
</span><span class='line'><span class="c">% Get the Accumulator Setup</span>
</span><span class='line'><span class="c">%%</span>
</span><span class='line'><span class="nf">shuffle</span><span class="p">(</span><span class="nv">List</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">shuffle</span><span class="p">(</span><span class="nv">List</span><span class="p">,</span> <span class="p">[]).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%%</span>
</span><span class='line'><span class="c">% Break recurssion once we have gone through</span>
</span><span class='line'><span class="c">% the whole deck</span>
</span><span class='line'><span class="c">%%</span>
</span><span class='line'><span class="nf">shuffle</span><span class="p">([],</span> <span class="nv">Acc</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nv">Acc</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c">%%</span>
</span><span class='line'><span class="c">% Shuffle the remaining deck</span>
</span><span class='line'><span class="c">% still left in List</span>
</span><span class='line'><span class="c">%%</span>
</span><span class='line'><span class="nf">shuffle</span><span class="p">(</span><span class="nv">List</span><span class="p">,</span> <span class="nv">Acc</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>	<span class="c">%% Split the deck at a random point</span>
</span><span class='line'>	<span class="c">%% then on the second part of the split</span>
</span><span class='line'>	<span class="c">%% take the top card and put at the begining of</span>
</span><span class='line'>	<span class="c">%% out shuffled pill (Acc)</span>
</span><span class='line'>	<span class="p">{</span><span class="nv">Leading</span><span class="p">,</span> <span class="p">[</span><span class="nv">H</span> <span class="p">|</span> <span class="nv">T</span><span class="p">]}</span> <span class="o">=</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">split</span><span class="p">(</span><span class="nn">random</span><span class="p">:</span><span class="nf">uniform</span><span class="p">(</span><span class="nb">length</span><span class="p">(</span><span class="nv">List</span><span class="p">))</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="nv">List</span><span class="p">),</span>
</span><span class='line'>	<span class="n">shuffle</span><span class="p">(</span><span class="nv">Leading</span> <span class="o">++</span> <span class="nv">T</span><span class="p">,</span> <span class="p">[</span><span class="nv">H</span> <span class="p">|</span> <span class="nv">Acc</span><span class="p">]).</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Well I am excited to <a href="/2013/07/22/etudes-for-erlang-ch-8/">Chapter 8</a>, when we finally get into processes.  That is next week, so stay tuned!</p>

<p>What are you most excited to learn about processes, next week??</p>

<p><a href="/2013/07/22/etudes-for-erlang-ch-8/">Chapter 8</a>
<a href="http://www.meetup.com/Erlang-NYC/">MEETUP</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ã‰tudes for Erlang - CH 5]]></title>
    <link href="http://connor311.github.io/2013/07/08/etudes-for-erlang-ch-5/"/>
    <updated>2013-07-08T23:36:00+00:00</updated>
    <id>http://connor311.github.io/2013/07/08/etudes-for-erlang-ch-5</id>
    <content type="html"><![CDATA[<p>Have you missed me??  For the past two weeks I have been driving to and from many a wedding.  My cousin, Olivia, got married two weeks ago to an awesome man, John!  Then this past weekend my best friend growing up, Ben, got married to a lady who I do not know to well but any person he would marry must be a great gal!  To each of you I wish you the best!</p>

<p>I am going to stick to doing only do one chapter per blog post.  Hopefully you should see two more posts right after this one!  For those of you who have forgotten completely what I have been talking about for the past 6 weeks check out <a href="/2013/06/25/etudes-for-erlang-ch-4/">chapter 4</a>.</p>

<p>Let&rsquo;s hop right into the good stuff!<!--more--></p>

<h2>Chapter 5: Strings</h2>

<p><a href="http://chimera.labs.oreilly.com/books/1234000000726/ch05.html">link</a></p>

<p>During the meetup, everyone discussed the first etude in this chapter as really really annoying!  The task set before us is to go against the erlang mantra of &ldquo;let it fail&rdquo;, and create a command line front end to our area functions that does not fail but gives pretty error messages.  While I do agree this exercise sucks, it was still pretty interesting to try and do something that is really easy in another language only to find it super hard in erlang.</p>

<p>The exersise asks us to create our command line util in a module named ask_area, with a function called area.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (ask_area.erl)</span> <a href='/downloads/code/erlang-etudes/ch5/ask_area.erl'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">ask_area</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">area</span><span class="o">/</span><span class="mi">0</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">area</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="p">{</span><span class="nv">Input</span><span class="p">,</span> <span class="nv">Shape</span><span class="p">}</span> <span class="o">=</span> <span class="n">get_shape</span><span class="p">(),</span>
</span><span class='line'>  <span class="k">case</span> <span class="nv">Shape</span> <span class="k">of</span>
</span><span class='line'>    <span class="n">unknown</span> <span class="o">-&gt;</span> <span class="nn">io</span><span class="p">:</span><span class="nf">format</span><span class="p">(</span><span class="s">&quot;Unknown shape </span><span class="si">~c~n</span><span class="s">&quot;</span><span class="p">,[</span><span class="nv">Input</span><span class="p">]);</span>
</span><span class='line'>    <span class="p">_</span> <span class="o">-&gt;</span> <span class="n">get_area</span><span class="p">(</span><span class="nv">Shape</span><span class="p">,</span> <span class="n">get_dimensions</span><span class="p">(</span><span class="nv">Shape</span><span class="p">))</span>
</span><span class='line'>  <span class="k">end</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">get_area</span><span class="p">(_,</span> <span class="p">{</span><span class="n">error</span><span class="p">,</span> <span class="p">_})</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nn">io</span><span class="p">:</span><span class="nf">format</span><span class="p">(</span><span class="s">&quot;Error in first number.</span><span class="si">~n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nf">get_area</span><span class="p">(_,</span> <span class="p">{_,</span> <span class="n">error</span><span class="p">})</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nn">io</span><span class="p">:</span><span class="nf">format</span><span class="p">(</span><span class="s">&quot;Error in second number.</span><span class="si">~n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nf">get_area</span><span class="p">(_,</span> <span class="p">{</span><span class="nv">X</span><span class="p">,</span> <span class="nv">Y</span><span class="p">})</span> <span class="k">when</span> <span class="nv">X</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">;</span> <span class="nv">Y</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nn">io</span><span class="p">:</span><span class="nf">format</span><span class="p">(</span><span class="s">&quot;Both number must be greater than or equal to zero.</span><span class="si">~n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nf">get_area</span><span class="p">(</span><span class="nv">Shape</span><span class="p">,</span> <span class="p">{</span><span class="nv">X</span><span class="p">,</span> <span class="nv">Y</span><span class="p">})</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nn">geom</span><span class="p">:</span><span class="nf">area</span><span class="p">({</span><span class="nv">Shape</span><span class="p">,</span> <span class="nv">X</span><span class="p">,</span> <span class="nv">Y</span><span class="p">}).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">get_shape</span><span class="p">()</span>  <span class="o">-&gt;</span>
</span><span class='line'>  <span class="p">[</span><span class="nv">Char</span><span class="p">|_]</span> <span class="o">=</span> <span class="nn">io</span><span class="p">:</span><span class="nf">get_line</span><span class="p">(</span><span class="s">&quot;R)ectangle, T)riangle, or E)llipse &gt; &quot;</span><span class="p">),</span>
</span><span class='line'>  <span class="n">char_to_shape</span><span class="p">(</span><span class="nv">Char</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">get_number</span><span class="p">(</span><span class="nv">Prompt</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">PromptString</span> <span class="o">=</span> <span class="s">&quot;Enter &quot;</span> <span class="o">++</span> <span class="nv">Prompt</span> <span class="o">++</span> <span class="s">&quot; &gt; &quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nv">Result</span> <span class="o">=</span> <span class="nn">io</span><span class="p">:</span><span class="nf">get_line</span><span class="p">(</span><span class="nv">PromptString</span><span class="p">),</span>
</span><span class='line'>  <span class="n">string_to_number</span><span class="p">(</span><span class="nv">Result</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">string_to_number</span><span class="p">(</span><span class="nv">String</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">Number</span> <span class="o">=</span> <span class="nn">string</span><span class="p">:</span><span class="nf">to_float</span><span class="p">(</span><span class="nv">String</span><span class="p">),</span>
</span><span class='line'>  <span class="k">case</span> <span class="nv">Number</span> <span class="k">of</span>
</span><span class='line'>    <span class="p">{</span><span class="n">error</span><span class="p">,_}</span> <span class="o">-&gt;</span> <span class="nb">element</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nn">string</span><span class="p">:</span><span class="nf">to_integer</span><span class="p">(</span><span class="nv">String</span><span class="p">));</span>
</span><span class='line'>    <span class="p">_</span> <span class="o">-&gt;</span> <span class="nb">element</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nv">Number</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">get_dimensions</span><span class="p">(</span><span class="n">triangle</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">Dimension1</span> <span class="o">=</span> <span class="n">get_number</span><span class="p">(</span><span class="s">&quot;width&quot;</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">Dimension2</span> <span class="o">=</span> <span class="n">get_number</span><span class="p">(</span><span class="s">&quot;height&quot;</span><span class="p">),</span>
</span><span class='line'>  <span class="p">{</span><span class="nv">Dimension1</span><span class="p">,</span> <span class="nv">Dimension2</span><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nf">get_dimensions</span><span class="p">(</span><span class="n">rectangle</span><span class="p">)</span><span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">Dimension1</span> <span class="o">=</span> <span class="n">get_number</span><span class="p">(</span><span class="s">&quot;base&quot;</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">Dimension2</span> <span class="o">=</span> <span class="n">get_number</span><span class="p">(</span><span class="s">&quot;height&quot;</span><span class="p">),</span>
</span><span class='line'>  <span class="p">{</span><span class="nv">Dimension1</span><span class="p">,</span> <span class="nv">Dimension2</span><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nf">get_dimensions</span><span class="p">(</span><span class="n">ellipse</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">Dimension1</span> <span class="o">=</span> <span class="n">get_number</span><span class="p">(</span><span class="s">&quot;axis&quot;</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">Dimension2</span> <span class="o">=</span> <span class="n">get_number</span><span class="p">(</span><span class="s">&quot;axis&quot;</span><span class="p">),</span>
</span><span class='line'>  <span class="p">{</span><span class="nv">Dimension1</span><span class="p">,</span> <span class="nv">Dimension2</span><span class="p">}.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">char_to_shape</span><span class="p">(</span><span class="nv">Char</span><span class="p">)</span>  <span class="o">-&gt;</span>
</span><span class='line'>  <span class="k">case</span> <span class="nv">Char</span> <span class="k">of</span>
</span><span class='line'>    <span class="sc">$T</span> <span class="o">-&gt;</span> <span class="p">{</span><span class="n">t</span><span class="p">,</span> <span class="n">triangle</span><span class="p">};</span>
</span><span class='line'>    <span class="sc">$t</span> <span class="o">-&gt;</span> <span class="p">{</span><span class="n">t</span><span class="p">,</span> <span class="n">triangle</span><span class="p">};</span>
</span><span class='line'>    <span class="sc">$R</span> <span class="o">-&gt;</span> <span class="p">{</span><span class="n">r</span><span class="p">,</span> <span class="n">rectangle</span><span class="p">};</span>
</span><span class='line'>    <span class="sc">$r</span> <span class="o">-&gt;</span> <span class="p">{</span><span class="n">r</span><span class="p">,</span> <span class="n">rectangle</span><span class="p">};</span>
</span><span class='line'>    <span class="sc">$E</span> <span class="o">-&gt;</span> <span class="p">{</span><span class="n">e</span><span class="p">,</span> <span class="n">ellipse</span><span class="p">};</span>
</span><span class='line'>    <span class="sc">$e</span> <span class="o">-&gt;</span> <span class="p">{</span><span class="n">e</span><span class="p">,</span> <span class="n">ellipse</span><span class="p">};</span>
</span><span class='line'>    <span class="p">_</span> <span class="o">-&gt;</span> <span class="p">{</span><span class="nv">Char</span><span class="p">,</span> <span class="n">unknown</span><span class="p">}</span>
</span><span class='line'>  <span class="k">end</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Alright if any of you worked through that with me, how long did it take you to get the right pretty error messages???  That was intense, even my stand by to just output what the code is returning to me does not work well in erlang.  I have to guess correctly as to what kind of type the thing I am trying to <code>io:format(&ldquo;~X~Y~Zâ€¦&rdquo;)</code>, else the whole thing blows up with an invalid arguments exception.</p>

<p>After that exercise I think even the author was done but his editor told him he needed two exercises in this etude.  I think that because the second exercise is kinda a joke compared to the first.  All that is needed is to take  ISO date formated string &ldquo;yyyy-mm-dd&rdquo; and return [yyyy,mm,dd] with ZERO error handling. Easy enough right.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (dates.erl)</span> <a href='/downloads/code/erlang-etudes/ch5/dates.erl'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">dates</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">date_parts</span><span class="o">/</span><span class="mi">1</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">date_parts</span><span class="p">(</span><span class="nv">Date</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="p">[</span><span class="nv">Year</span><span class="p">,</span> <span class="nv">Month</span><span class="p">,</span> <span class="nv">Day</span><span class="p">]</span> <span class="o">=</span> <span class="nn">re</span><span class="p">:</span><span class="nf">split</span><span class="p">(</span><span class="nv">Date</span><span class="p">,</span> <span class="s">&quot;-&quot;</span><span class="p">,</span> <span class="p">[{</span><span class="n">return</span><span class="p">,</span> <span class="n">list</span><span class="p">}]),</span>
</span><span class='line'>  <span class="p">[</span><span class="nb">element</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="nn">string</span><span class="p">:</span><span class="nf">to_integer</span><span class="p">(</span><span class="nv">Year</span><span class="p">)),</span>
</span><span class='line'>   <span class="nb">element</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="nn">string</span><span class="p">:</span><span class="nf">to_integer</span><span class="p">(</span><span class="nv">Month</span><span class="p">)),</span>
</span><span class='line'>   <span class="nb">element</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="nn">string</span><span class="p">:</span><span class="nf">to_integer</span><span class="p">(</span><span class="nv">Day</span><span class="p">))].</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Thats it. If anyone asks me to write a command line utility again in erlang, I am going to tell them that I will buy them lunch if I can write it in another language like ruby or c#.</p>

<p>Let me know if you ran into any other interesting issues while working on this weeks etudes!</p>

<p><a href="http://www.meetup.com/Erlang-NYC/">MEETUP</a></p>

<p><a href="/2013/07/15/etudes-for-erlang-ch-7">Chapter 7</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ã‰tudes for Erlang - CH 4]]></title>
    <link href="http://connor311.github.io/2013/06/25/etudes-for-erlang-ch-4/"/>
    <updated>2013-06-25T23:26:00+00:00</updated>
    <id>http://connor311.github.io/2013/06/25/etudes-for-erlang-ch-4</id>
    <content type="html"><![CDATA[<p>This week the homework for the <a href="http://www.meetup.com/Erlang-NYC/events/123394132/" target="_blank">meetup</a>Â was chapters 4 &amp; 5. Â However this weekend I was at my childhood best friend&rsquo;s bachelorÂ party so I only got to chapter 4. Ouch, Ouch, please stop throwing tomatoes,Â lettuce and actually I don&rsquo;t want to know what that is, I am sorry! Â If you want more Erlang check out last week for <a href="/2013/06/16/etudes-for-erlang-ch-3/">chapter 3</a>, again!</p>

<p>The party was a blast I got to play Frisbee golf for the first time in real life, it was awesome. Â The other plus was the party&rsquo;s location was in Richmond, VA, so I got to rent a car and drive all the way there. Â For those of you who do not know me, I LOVE TO DRIVE!!! Â IÂ specificallyÂ went to a rental company just because I heard they had VW Jettas for rent. Â Must say, this whole better gas mileage kick the auto industry is on really makes driving automatics suck. Â Give me a manual any day.</p>

<p>Oh wow I really got off track, my B.<!--more--></p>

<h2>Chapter 4: Logic and Recursion</h2>


<p><a href="http://chimera.labs.oreilly.com/books/1234000000726/ch04.html" target="_blank">link</a></p>

<p>The first task this week was super simple, change last weeks area function into an Erlang case statement.  Since case statements are just pattern matches, the two are almost identical.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">%% @author C J Ross &lt;a href=&quot;&amp;#109;&amp;#x61;&amp;#105;&amp;#x6c;&amp;#x74;&amp;#x6f;&amp;#58;&amp;#99;&amp;#x6f;&amp;#110;&amp;#110;&amp;#111;&amp;#114;&amp;#x33;&amp;#x31;&amp;#49;&amp;#64;&amp;#103;&amp;#x6d;&amp;#97;&amp;#x69;&amp;#108;&amp;#x2e;&amp;#99;&amp;#x6f;&amp;#109;&quot;&gt;&amp;#x63;&amp;#x6f;&amp;#110;&amp;#x6e;&amp;#x6f;&amp;#114;&amp;#51;&amp;#49;&amp;#49;&amp;#x40;&amp;#x67;&amp;#109;&amp;#97;&amp;#x69;&amp;#108;&amp;#46;&amp;#x63;&amp;#x6f;&amp;#x6d;&lt;/a&gt;</span>
</span><span class='line'><span class="c">%% @doc Functions for calculating areas of geometric shapes.</span>
</span><span class='line'><span class="c">%% @copyright 2013 C J Ross</span>
</span><span class='line'><span class="c">%% @version 0.1&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">module</span><span class="p">(</span><span class="n">geom</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">area</span><span class="o">/</span><span class="mi">1</span><span class="p">]).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">spec</span><span class="p">(</span><span class="n">area</span><span class="p">({</span><span class="n">atom</span><span class="p">(),</span> <span class="n">number</span><span class="p">(),</span><span class="n">number</span><span class="p">()})</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span> <span class="n">number</span><span class="p">()).</span>
</span><span class='line'><span class="nf">area</span><span class="p">({</span><span class="nv">Shape</span><span class="p">,</span> <span class="nv">Height</span><span class="p">,</span> <span class="nv">Width</span><span class="p">})</span> <span class="k">when</span> <span class="nv">Height</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">Width</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">case</span> <span class="nv">Shape</span> <span class="k">of</span>
</span><span class='line'>    <span class="n">rectangle</span>  <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">Height</span> <span class="o">*</span> <span class="nv">Width</span><span class="p">;</span>
</span><span class='line'>    <span class="n">triangle</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">Height</span> <span class="o">*</span> <span class="nv">Width</span> <span class="o">/</span> <span class="mi">2</span><span class="p">.</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">ellipse</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>        <span class="nn">math</span><span class="p">:</span><span class="nf">pi</span><span class="p">()</span> <span class="o">*</span> <span class="nv">Height</span> <span class="o">*</span> <span class="nv">Width</span><span class="p">;</span>
</span><span class='line'>    <span class="p">_</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>        <span class="mi">0</span>
</span><span class='line'><span class="k">end</span><span class="p">.</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The main topic for this week is introduced in task two, Recursion!  The task, Greatest Common Divisor, makes me sentimental a little bit. I don&rsquo;t know about you, but GCD was the first program I had to write recursion for in college.  Again, another easy problem as to not jump into a freezing pool all at once.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">%% @author C J Ross &lt;a href=&quot;&amp;#109;&amp;#x61;&amp;#x69;&amp;#108;&amp;#116;&amp;#x6f;&amp;#x3a;&amp;#99;&amp;#x6f;&amp;#110;&amp;#x6e;&amp;#x6f;&amp;#x72;&amp;#51;&amp;#x31;&amp;#49;&amp;#64;&amp;#x67;&amp;#109;&amp;#97;&amp;#x69;&amp;#108;&amp;#x2e;&amp;#x63;&amp;#111;&amp;#109;&quot;&gt;&amp;#99;&amp;#111;&amp;#110;&amp;#x6e;&amp;#x6f;&amp;#114;&amp;#51;&amp;#x31;&amp;#x31;&amp;#64;&amp;#103;&amp;#109;&amp;#x61;&amp;#x69;&amp;#108;&amp;#46;&amp;#99;&amp;#111;&amp;#x6d;&lt;/a&gt;</span>
</span><span class='line'><span class="c">%% @doc Functions for calculating GCD.</span>
</span><span class='line'><span class="c">%% @copyright 2013 C J Ross</span>
</span><span class='line'><span class="c">%% @version 0.1&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">module</span><span class="p">(</span><span class="n">dijkstra</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">gcd</span><span class="o">/</span><span class="mi">2</span><span class="p">]).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">spec</span><span class="p">(</span><span class="n">gcd</span><span class="p">(</span><span class="n">number</span><span class="p">(),</span> <span class="n">number</span><span class="p">())</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span> <span class="n">number</span><span class="p">()).</span>
</span><span class='line'><span class="nf">gcd</span><span class="p">(</span><span class="nv">M</span><span class="p">,</span> <span class="nv">N</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">if</span> <span class="nv">M</span> <span class="o">==</span> <span class="nv">N</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nv">M</span><span class="p">;</span>
</span><span class='line'>   <span class="nv">M</span> <span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nv">N</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">gcd</span><span class="p">(</span><span class="nv">M</span><span class="o">-</span><span class="nv">N</span><span class="p">,</span> <span class="nv">N</span><span class="p">);</span>
</span><span class='line'>   <span class="nv">M</span> <span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="nv">N</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">gcd</span><span class="p">(</span><span class="nv">M</span><span class="p">,</span> <span class="nv">N</span> <span class="o">-</span> <span class="nv">M</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span><span class="p">.</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>One of the big sellers for Erlang is an idea of Tail Recursion. This is a language concept that allows recursion with out worries of overflowing the stack (the main concern of recursion).  My co-worker and good pal, Steve, nicely informed me that most languages actually implement this feature.  Makes me feel like a dummy for thinking Erlang was the cool kid on the block for implementing this.</p>

<p>The objective for for task three is to not use tail-recursion, then later compare to an actual tail-recursion version. The math function of choice for this task, is to raise a number to another number. X to the power of N, or 2 to the power of 2 equals 4.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">%% @author C J Ross &lt;a href=&quot;&amp;#x6d;&amp;#97;&amp;#x69;&amp;#x6c;&amp;#x74;&amp;#x6f;&amp;#58;&amp;#x63;&amp;#111;&amp;#110;&amp;#x6e;&amp;#x6f;&amp;#114;&amp;#x33;&amp;#x31;&amp;#x31;&amp;#64;&amp;#x67;&amp;#x6d;&amp;#x61;&amp;#105;&amp;#x6c;&amp;#46;&amp;#x63;&amp;#111;&amp;#x6d;&quot;&gt;&amp;#x63;&amp;#x6f;&amp;#110;&amp;#x6e;&amp;#111;&amp;#x72;&amp;#51;&amp;#x31;&amp;#49;&amp;#x40;&amp;#103;&amp;#x6d;&amp;#97;&amp;#105;&amp;#x6c;&amp;#x2e;&amp;#x63;&amp;#x6f;&amp;#109;&lt;/a&gt;</span>
</span><span class='line'><span class="c">%% @doc Functions for calculating powers</span>
</span><span class='line'><span class="c">%% @copyright 2013 C J Ross</span>
</span><span class='line'><span class="c">%% @version 0.1&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">module</span><span class="p">(</span><span class="n">powers</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">raise</span><span class="o">/</span><span class="mi">2</span><span class="p">]).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">spec</span><span class="p">(</span><span class="n">raise</span><span class="p">(</span><span class="n">number</span><span class="p">(),</span> <span class="n">number</span><span class="p">())</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span> <span class="n">number</span><span class="p">()).</span>
</span><span class='line'><span class="nf">raise</span><span class="p">(_,</span> <span class="mi">0</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">raise</span><span class="p">(</span><span class="nv">X</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nv">X</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">raise</span><span class="p">(</span><span class="nv">X</span><span class="p">,</span> <span class="nv">N</span><span class="p">)</span> <span class="k">when</span> <span class="nv">N</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nv">X</span> <span class="o">*</span> <span class="n">raise</span><span class="p">(</span><span class="nv">X</span><span class="p">,</span> <span class="nv">N</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">raise</span><span class="p">(</span><span class="nv">X</span><span class="p">,</span> <span class="nv">N</span><span class="p">)</span> <span class="k">when</span> <span class="nv">N</span> <span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">0</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="mi">1</span> <span class="o">/</span> <span class="n">raise</span><span class="p">(</span><span class="nv">X</span><span class="p">,</span> <span class="o">-</span><span class="nv">N</span><span class="p">).</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now as promised, the tail-recursive version.  The first noticeable difference is the addition of a helper function to accumulate the answer. This is common practice since the caller of the public method will not know what to start the accumulator variable as, nor should they.  Notice how the main return with recursion just calls a method and returns its return.  If any kind of modifications was done with the return, this method would not longer be tail-recursive.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">%% @author C J Ross &lt;a href=&quot;&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#x74;&amp;#111;&amp;#58;&amp;#99;&amp;#111;&amp;#x6e;&amp;#x6e;&amp;#x6f;&amp;#x72;&amp;#51;&amp;#x31;&amp;#49;&amp;#64;&amp;#x67;&amp;#109;&amp;#x61;&amp;#x69;&amp;#x6c;&amp;#x2e;&amp;#99;&amp;#x6f;&amp;#x6d;&quot;&gt;&amp;#x63;&amp;#111;&amp;#x6e;&amp;#110;&amp;#111;&amp;#x72;&amp;#51;&amp;#x31;&amp;#x31;&amp;#x40;&amp;#x67;&amp;#109;&amp;#97;&amp;#x69;&amp;#x6c;&amp;#x2e;&amp;#99;&amp;#111;&amp;#x6d;&lt;/a&gt;</span>
</span><span class='line'><span class="c">%% @doc Functions for calculating powers</span>
</span><span class='line'><span class="c">%% @copyright 2013 C J Ross</span>
</span><span class='line'><span class="c">%% @version 0.1&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">module</span><span class="p">(</span><span class="n">powers_tail</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">raise</span><span class="o">/</span><span class="mi">2</span><span class="p">]).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">spec</span><span class="p">(</span><span class="n">raise</span><span class="p">(</span><span class="n">number</span><span class="p">(),</span> <span class="n">number</span><span class="p">())</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span> <span class="n">number</span><span class="p">()).</span>
</span><span class='line'><span class="nf">raise</span><span class="p">(_,</span> <span class="mi">0</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">raise</span><span class="p">(</span><span class="nv">X</span><span class="p">,</span> <span class="nv">N</span><span class="p">)</span> <span class="k">when</span> <span class="nv">N</span> <span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">0</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="mi">1</span> <span class="o">/</span> <span class="n">raise</span><span class="p">(</span><span class="nv">X</span><span class="p">,</span> <span class="o">-</span><span class="nv">N</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">raise</span><span class="p">(</span><span class="nv">X</span><span class="p">,</span> <span class="nv">N</span><span class="p">)</span> <span class="k">when</span> <span class="nv">N</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">raise</span><span class="p">(</span><span class="nv">X</span><span class="p">,</span> <span class="nv">N</span><span class="p">,</span> <span class="mi">1</span><span class="p">).</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">spec</span><span class="p">(</span><span class="n">raise</span><span class="p">(</span><span class="n">number</span><span class="p">(),</span> <span class="n">number</span><span class="p">(),</span> <span class="n">number</span><span class="p">())</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span> <span class="n">number</span><span class="p">()).</span>
</span><span class='line'><span class="nf">raise</span><span class="p">(_,</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">A</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nv">A</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">raise</span><span class="p">(</span><span class="nv">X</span><span class="p">,</span> <span class="nv">N</span><span class="p">,</span> <span class="nv">A</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">raise</span><span class="p">(</span><span class="nv">X</span><span class="p">,</span> <span class="nv">N</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="nv">X</span> <span class="o">*</span> <span class="nv">A</span><span class="p">).</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>For the last task, the author decided to up the difficulty a wee bit.  The new function in the powers module, is to find the nth root by guessing (<a href="http://en.wikipedia.org/wiki/Newton%27s_method" target="_blank">Newton-Raphson</a> method for calculating roots).  Another addition is the outputting of the guesses while the function is working.  I was excited to work on this problem, since it was the first one to really use everything that we have learned so far: functions, Variables, if statements, and recursion.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">&amp;</span><span class="n">hellip</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">spec</span><span class="p">(</span><span class="n">nth_root</span><span class="p">(</span><span class="n">number</span><span class="p">(),</span> <span class="n">number</span><span class="p">())</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span> <span class="n">number</span><span class="p">()).</span>
</span><span class='line'><span class="nf">nth_root</span><span class="p">(</span><span class="nv">X</span><span class="p">,</span> <span class="nv">N</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">nth_root</span><span class="p">(</span><span class="nv">X</span><span class="p">,</span> <span class="nv">N</span> <span class="p">,</span> <span class="nv">X</span> <span class="o">/</span> <span class="mi">2</span><span class="p">.</span><span class="mi">0</span><span class="p">).</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">spec</span><span class="p">(</span><span class="n">nth_root</span><span class="p">(</span><span class="n">number</span><span class="p">(),</span> <span class="n">number</span><span class="p">(),</span> <span class="n">number</span><span class="p">())</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span> <span class="n">number</span><span class="p">()).</span>
</span><span class='line'><span class="nf">nth_root</span><span class="p">(</span><span class="nv">X</span><span class="p">,</span> <span class="nv">N</span><span class="p">,</span> <span class="nv">A</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nn">io</span><span class="p">:</span><span class="nf">format</span><span class="p">(</span><span class="s">&quot;Current guess is </span><span class="si">~p~n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">[</span><span class="nv">A</span><span class="p">]),</span>
</span><span class='line'><span class="nv">F</span> <span class="o">=</span> <span class="n">raise</span><span class="p">(</span><span class="nv">A</span><span class="p">,</span> <span class="nv">N</span><span class="p">)</span> <span class="o">-</span> <span class="nv">X</span><span class="p">,</span>
</span><span class='line'><span class="nv">Fprime</span> <span class="o">=</span> <span class="nv">N</span> <span class="o">*</span> <span class="n">raise</span><span class="p">(</span><span class="nv">A</span><span class="p">,</span> <span class="nv">N</span><span class="o">-</span><span class="mi">1</span><span class="p">),</span>
</span><span class='line'><span class="nv">Next</span> <span class="o">=</span> <span class="nv">A</span> <span class="o">-</span> <span class="nv">F</span> <span class="o">/</span> <span class="nv">Fprime</span><span class="p">,</span>
</span><span class='line'><span class="nv">Change</span> <span class="o">=</span> <span class="nb">abs</span><span class="p">(</span><span class="nv">Next</span> <span class="o">-</span> <span class="nv">A</span><span class="p">),</span>
</span><span class='line'><span class="k">if</span> <span class="nv">Change</span> <span class="o">=</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">1</span><span class="p">.</span><span class="mi">0</span><span class="n">e</span><span class="o">-</span><span class="mi">8</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nv">Next</span><span class="p">;</span>
</span><span class='line'>   <span class="nv">Change</span> <span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">1</span><span class="p">.</span><span class="mi">0</span><span class="n">e</span><span class="o">-</span><span class="mi">8</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">nth_root</span><span class="p">(</span><span class="nv">X</span><span class="p">,</span> <span class="nv">N</span><span class="p">,</span> <span class="nv">Next</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span><span class="p">.</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Hope to see you tomorrow at the meetup!  Til next week, play some Frisbee Golf!</p>

<p><a href="/2013/07/08/etudes-for-erlang-ch-5">Chapter 5</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ã‰tudes for Erlang - CH 3]]></title>
    <link href="http://connor311.github.io/2013/06/16/etudes-for-erlang-ch-3/"/>
    <updated>2013-06-16T23:01:00+00:00</updated>
    <id>http://connor311.github.io/2013/06/16/etudes-for-erlang-ch-3</id>
    <content type="html"><![CDATA[<p>It is that time again, well I don&rsquo;t really know if I can say that yet since this is only the second installment of the series. Â Last week I wrote about <a href="/2013/06/14/etudes-for-erlang-ch-1-and-2/">chapters 1 &amp; 2</a> from <a href="http://chimera.labs.oreilly.com/books/1234000000726" target="_blank">Etudes for Erlang</a>, however I actually wrote my solutions after the <a href="http://www.meetup.com/Erlang-NYC/events/122174852/" target="_blank">meetup</a>. Â This time I am getting a head start and thankfully I only have to do one chapter. I will just hop right into it, because I am excited to learn some more about Erlang!<!--more--></p>

<h2>Chapter 3: Atoms, Tuples, and Pattern Matching</h2>


<p><a href="http://chimera.labs.oreilly.com/books/1234000000726/ch03.html" target="_blank">link</a></p>

<p>The first part is asking me to update my area function, from last week, to also calculate the area of a triangle, and ellipse not just a rectangle. Â The main change it would seem is using pattern matching on a new parameter that is an atom representing the shape.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="nf">area</span><span class="p">(</span><span class="n">rectangle</span><span class="p">,</span> <span class="nv">Height</span><span class="p">,</span> <span class="nv">Width</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nv">Height</span> <span class="o">*</span> <span class="nv">Width</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">area</span><span class="p">(</span><span class="n">triangle</span><span class="p">,</span> <span class="nv">Height</span><span class="p">,</span> <span class="nv">Width</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nv">Height</span> <span class="o">*</span> <span class="nv">Width</span> <span class="o">/</span> <span class="mi">2</span><span class="p">.</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">area</span><span class="p">(</span><span class="n">ellipse</span><span class="p">,</span> <span class="nv">Height</span><span class="p">,</span> <span class="nv">Width</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nn">math</span><span class="p">:</span><span class="nf">pi</span><span class="p">()</span> <span class="o">*</span> <span class="nv">Height</span> <span class="o">*</span> <span class="nv">Width</span><span class="p">.</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Output:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="mi">3</span><span class="o">&gt;</span> <span class="n">c</span><span class="p">(</span><span class="n">geom</span><span class="p">).</span>
</span><span class='line'><span class="p">{</span><span class="n">ok</span><span class="p">,</span><span class="n">geom</span><span class="p">}</span>
</span><span class='line'><span class="mi">4</span><span class="o">&gt;</span> <span class="nn">geom</span><span class="p">:</span><span class="nf">area</span><span class="p">(</span><span class="n">rectangle</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">).</span>
</span><span class='line'><span class="mi">12</span>
</span><span class='line'><span class="mi">5</span><span class="o">&gt;</span> <span class="nn">geom</span><span class="p">:</span><span class="nf">area</span><span class="p">(</span><span class="n">triangle</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span><span class="mi">5</span><span class="p">).</span>
</span><span class='line'><span class="mi">7</span><span class="p">.</span><span class="mi">5</span>
</span><span class='line'><span class="mi">6</span><span class="o">&gt;</span> <span class="nn">geom</span><span class="p">:</span><span class="nf">area</span><span class="p">(</span><span class="n">ellipse</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">).</span>
</span><span class='line'><span class="mi">25</span><span class="p">.</span><span class="mi">132741228718345</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The second part brings up the fact that our current solution will allow a negative input, while you cannot have a negative area. The recommendation is to use guards. A guard is a when statement after the function signature but before the &ndash;&gt;. If you have more then one they can be seporated with commas.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="nf">area</span><span class="p">(</span><span class="n">rectangle</span><span class="p">,</span> <span class="nv">Height</span><span class="p">,</span> <span class="nv">Width</span><span class="p">)</span> <span class="k">when</span> <span class="nv">Height</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">Width</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nv">Height</span> <span class="o">*</span> <span class="nv">Width</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">area</span><span class="p">(</span><span class="n">triangle</span><span class="p">,</span> <span class="nv">Height</span><span class="p">,</span> <span class="nv">Width</span><span class="p">)</span> <span class="k">when</span> <span class="nv">Height</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">Width</span> <span class="o">&gt;=</span> <span class="mi">0</span>  <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nv">Height</span> <span class="o">*</span> <span class="nv">Width</span> <span class="o">/</span> <span class="mi">2</span><span class="p">.</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">area</span><span class="p">(</span><span class="n">ellipse</span><span class="p">,</span> <span class="nv">Height</span><span class="p">,</span> <span class="nv">Width</span><span class="p">)</span> <span class="k">when</span> <span class="nv">Height</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">Width</span> <span class="o">&gt;=</span> <span class="mi">0</span>  <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nn">math</span><span class="p">:</span><span class="nf">pi</span><span class="p">()</span> <span class="o">*</span> <span class="nv">Height</span> <span class="o">*</span> <span class="nv">Width</span><span class="p">.</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Output:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="mi">11</span><span class="o">&gt;</span> <span class="nn">geom</span><span class="p">:</span><span class="nf">area</span><span class="p">(</span><span class="n">rectangle</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">).</span>
</span><span class='line'><span class="mi">12</span>
</span><span class='line'><span class="mi">12</span><span class="o">&gt;</span> <span class="nn">geom</span><span class="p">:</span><span class="nf">area</span><span class="p">(</span><span class="n">ellipse</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">).</span>
</span><span class='line'><span class="mi">18</span><span class="p">.</span><span class="mi">84955592153876</span>
</span><span class='line'><span class="mi">13</span><span class="o">&gt;</span> <span class="nn">geom</span><span class="p">:</span><span class="nf">area</span><span class="p">(</span><span class="n">rectangle</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span> <span class="p">,</span><span class="mi">3</span><span class="p">).</span>
</span><span class='line'><span class="o">**</span> <span class="n">exception</span> <span class="nn">error</span><span class="p">:</span> <span class="n">no</span> <span class="n">function</span> <span class="n">clause</span> <span class="n">matching</span> <span class="nn">geom</span><span class="p">:</span><span class="nf">area</span><span class="p">(</span><span class="n">rectangle</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span> <span class="p">(</span><span class="n">geom</span><span class="p">.</span><span class="n">erl</span><span class="p">,</span> <span class="n">line</span> <span class="mi">14</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Onto part three, where our function is now supposed to take in any kind of shape. One catch is that if the function does not support the shape it just returns zero. Seems a little none Erlang (let it fail), but I guess it is a good way to teach underscores. Oh crap, I just gave away the answer&hellip; In Erlang an _ in a signature means accept anything.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="err">&amp;</span><span class="n">hellip</span><span class="p">;</span>
</span><span class='line'><span class="nf">area</span><span class="p">(</span><span class="n">ellipse</span><span class="p">,</span> <span class="nv">Height</span><span class="p">,</span> <span class="nv">Width</span><span class="p">)</span> <span class="k">when</span> <span class="nv">Height</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">Width</span> <span class="o">&gt;=</span> <span class="mi">0</span>  <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nn">math</span><span class="p">:</span><span class="nf">pi</span><span class="p">()</span> <span class="o">*</span> <span class="nv">Height</span> <span class="o">*</span> <span class="nv">Width</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">area</span><span class="p">(</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">,</span> <span class="p">_)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">.</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Output:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="mi">18</span><span class="o">&gt;</span> <span class="nn">geom</span><span class="p">:</span><span class="nf">area</span><span class="p">(</span><span class="n">rectangle</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">).</span>
</span><span class='line'><span class="mi">12</span>
</span><span class='line'><span class="mi">19</span><span class="o">&gt;</span> <span class="nn">geom</span><span class="p">:</span><span class="nf">area</span><span class="p">(</span><span class="n">pentagon</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">).</span>
</span><span class='line'><span class="mi">0</span>
</span><span class='line'><span class="mi">20</span><span class="o">&gt;</span> <span class="nn">geom</span><span class="p">:</span><span class="nf">area</span><span class="p">(</span><span class="n">hexagon</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="p">).</span>
</span><span class='line'><span class="mi">0</span>
</span><span class='line'><span class="mi">21</span><span class="o">&gt;</span> <span class="nn">geom</span><span class="p">:</span><span class="nf">area</span><span class="p">(</span><span class="n">rectangle</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">3</span><span class="p">).</span>
</span><span class='line'><span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>As you can see, now our negatives return zero even for recognized shapes. This is because the guards are making the pattern match fail, those allowing the catch all case to match and return zero.</p>

<p>The fourth and last part brings Erlang Tuples into the picture. The new requirement is to only have one public facing function, area/1. How are we going to take a 3 parameter function down to only one you ask? By using tuples, which in my mind are the strongly typed messages used in Erlang. While Erlang compiler does not throw error messages like a normal strongly typed languages, the use of tuples, atoms, and pattern matching allow a programmer to specify exactly what he/she wants to come into the function. In this example we will continue to use the shape name as the object type, by making it the first object in the tuple followed by its specs. {shape,number,number}</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">geom</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">area</span><span class="o">/</span><span class="mi">1</span><span class="p">]).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">area</span><span class="p">({</span><span class="nv">Shape</span><span class="p">,</span> <span class="nv">Height</span><span class="p">,</span> <span class="nv">Width</span><span class="p">})</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">area</span><span class="p">(</span><span class="nv">Shape</span><span class="p">,</span> <span class="nv">Height</span><span class="p">,</span> <span class="nv">Width</span><span class="p">).</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">area</span><span class="p">(</span><span class="n">rectangle</span><span class="p">,</span> <span class="nv">Height</span><span class="p">,</span> <span class="nv">Width</span><span class="p">)</span> <span class="k">when</span> <span class="nv">Height</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">Width</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nv">Height</span> <span class="o">*</span> <span class="nv">Width</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">area</span><span class="p">(</span><span class="n">triangle</span><span class="p">,</span> <span class="nv">Height</span><span class="p">,</span> <span class="nv">Width</span><span class="p">)</span> <span class="k">when</span> <span class="nv">Height</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">Width</span> <span class="o">&gt;=</span> <span class="mi">0</span>  <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nv">Height</span> <span class="o">*</span> <span class="nv">Width</span> <span class="o">/</span> <span class="mi">2</span><span class="p">.</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">area</span><span class="p">(</span><span class="n">ellipse</span><span class="p">,</span> <span class="nv">Height</span><span class="p">,</span> <span class="nv">Width</span><span class="p">)</span> <span class="k">when</span> <span class="nv">Height</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">Width</span> <span class="o">&gt;=</span> <span class="mi">0</span>  <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nn">math</span><span class="p">:</span><span class="nf">pi</span><span class="p">()</span> <span class="o">*</span> <span class="nv">Height</span> <span class="o">*</span> <span class="nv">Width</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">area</span><span class="p">(</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">,</span> <span class="p">_)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">.</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Output:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="mi">26</span><span class="o">&gt;</span> <span class="nn">geom</span><span class="p">:</span><span class="nf">area</span><span class="p">({</span><span class="n">rectangle</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">3</span><span class="p">}).</span>
</span><span class='line'><span class="mi">21</span>
</span><span class='line'><span class="mi">27</span><span class="o">&gt;</span> <span class="nn">geom</span><span class="p">:</span><span class="nf">area</span><span class="p">({</span><span class="n">triangle</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">3</span><span class="p">}).</span>
</span><span class='line'><span class="mi">10</span><span class="p">.</span><span class="mi">5</span>
</span><span class='line'><span class="mi">28</span><span class="o">&gt;</span> <span class="nn">geom</span><span class="p">:</span><span class="nf">area</span><span class="p">({</span><span class="n">ellipse</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">3</span><span class="p">}).</span>
</span><span class='line'><span class="mi">65</span><span class="p">.</span><span class="mi">97344572538566</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Hope to see you at Erlang-NYC meetup this tuesday (06/18/2013)! Look for next weeks solution to chapters 4 &amp; 5, next sunday .</p>

<p><a href="/2013/06/25/etudes-for-erlang-ch-4">Chapter 4</a></p>
]]></content>
  </entry>
  
</feed>
